This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.repomixignore
dashboard/backend/auth.py
dashboard/backend/core.py
dashboard/backend/crud.py
dashboard/backend/database.py
dashboard/backend/Dockerfile
dashboard/backend/export_artifacts_target1.py
dashboard/backend/export_artifacts_target2.py
dashboard/backend/export_artifacts_target3.py
dashboard/backend/export_hibrido_target1.py
dashboard/backend/export_hibrido_target2.py
dashboard/backend/export_hibrido_target3.py
dashboard/backend/main.py
dashboard/backend/models.py
dashboard/backend/README.md
dashboard/backend/requirements.txt
dashboard/backend/schemas.py
dashboard/docker-compose.yml
dashboard/frontend/dashboard_dash.py
dashboard/frontend/Dockerfile
dashboard/frontend/README.md
dashboard/frontend/requirements.txt
dashboard/README.md
notebooks/PROJETOFINAL.ipynb
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".repomixignore">
# Arquivos de configuração de ambiente e exemplos
dashboard/.env.example
.env

# Arquivos gerados pelo Git e editores
.gitignore

# Dados de treinamento e artefatos de ML (gerados pelos scripts)
# É melhor ignorá-los se a lógica principal está nos scripts de exportação
# e no notebook. O repomix já ignora binários como .pkl por padrão.
dashboard/backend/ml_artifacts/
*.pkl
*.joblib

# Dados brutos e intermediários (se existirem)
notebooks/JogadoresV1.xlsx
Dados_Otimizados_V4.xlsx
Dados_para_modelo.xlsx

# Arquivos de cache e logs do treinamento do CatBoost
dashboard/backend/catboost_info/

# Arquivos de cache do Python
__pycache__/
*.pyc

# Pontos de verificação de notebooks
.ipynb_checkpoints/
</file>

<file path="dashboard/backend/auth.py">
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from datetime import datetime, timedelta
import os
from core import bcrypt # <--- IMPORTAÇÃO CHAVE

SECRET_KEY = os.getenv('JWT_SECRET_KEY', 'default_secret_key')
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

def verify_password(plain_password, hashed_password):
    """Verifica a senha usando bcrypt."""
    # A biblioteca Flask-Bcrypt espera que o hash seja um bytes-like object
    return bcrypt.check_password_hash(hashed_password.encode('utf-8'), plain_password)

def get_password_hash(password):
    """Gera o hash da senha usando bcrypt."""
    return bcrypt.generate_password_hash(password).decode('utf-8')

def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user_id(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: str = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    return user_id
</file>

<file path="dashboard/backend/core.py">
from fastapi import FastAPI
from flask_bcrypt import Bcrypt

app = FastAPI(title="API do Projeto Daruma")

# Instancia o Bcrypt diretamente, sem associar a um app Flask.
bcrypt = Bcrypt()
</file>

<file path="dashboard/backend/crud.py">
# crud.py
from sqlalchemy.orm import Session
import models
import auth

def get_user_by_username(db: Session, username: str):
    return db.query(models.User).filter(models.User.username == username).first()

def create_user(db: Session, user_schema: models.User):
    hashed_password = auth.get_password_hash(user_schema.password)
    db_user = models.User(username=user_schema.username, password_hash=hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user
</file>

<file path="dashboard/backend/database.py">
# database.py
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

SQLALCHEMY_DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://user:password@db:5432/daruma_db')

engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Dependency para obter a sessão do DB
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
</file>

<file path="dashboard/backend/export_artifacts_target1.py">
# export_artifacts_target1.py

import pandas as pd
import numpy as np
import os
import pickle
import joblib
import optuna
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import RobustScaler
from sklearn.feature_selection import VarianceThreshold
from sklearn.metrics import r2_score
from catboost import CatBoostRegressor

print("="*80)
print("INICIANDO EXPORTAÇÃO DE ARTEFATOS PARA O TARGET 1")
print("="*80)

# --- 1. CONFIGURAÇÕES ---
ARTIFACTS_PATH = "ml_artifacts"
if not os.path.exists(ARTIFACTS_PATH):
    os.makedirs(ARTIFACTS_PATH)
TARGET = 'Target1'
RAW_DATA_FILE = 'JogadoresV1.xlsx'
RANDOM_STATE = 42

# --- 2. CARREGAMENTO E FEATURE ENGINEERING (Lógica do Notebook Fase 2) ---
print(f"\n[FASE 1] Carregando e processando dados de '{RAW_DATA_FILE}'...")
try:
    df = pd.read_excel(RAW_DATA_FILE)
except FileNotFoundError:
    print(f"❌ ERRO: Arquivo '{RAW_DATA_FILE}' não encontrado.")
    exit()

df.dropna(subset=[TARGET], inplace=True)

# Limpeza e conversão de tipos
if 'F0103' in df.columns:
    df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')

p_cols = [c for c in df.columns if c.startswith('P') and any(char.isdigit() for char in c)]
t_cols = [c for c in df.columns if c.startswith('T') and any(char.isdigit() for char in c)]
f_cols = [c for c in df.columns if c.startswith('F') and len(c) > 1 and any(char.isdigit() for char in c)]

for col in p_cols + t_cols + f_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')
    df[col].replace(-1, np.nan, inplace=True)

# Imputação com mediana
for col in p_cols + t_cols + f_cols:
    if df[col].isnull().sum() > 0:
        df[col].fillna(df[col].median(), inplace=True)

# Feature Engineering
if 'QtdHorasDormi' in df.columns and 'Acordar' in df.columns:
    df['sono_total'] = df['QtdHorasDormi']
    df['sono_x_acordar'] = df['QtdHorasDormi'] * df['Acordar']

if p_cols:
    df['P_mean'] = df[p_cols].mean(axis=1)
    df['P_std'] = df[p_cols].std(axis=1)

if t_cols:
    df['T_mean'] = df[t_cols].mean(axis=1)

# Agregações conceituais de F
f_sono = [c for c in f_cols if c.startswith('F07')]
if f_sono:
    df['F_sono_mean'] = df[f_sono].mean(axis=1)

print("✅ Dados processados e features criadas.")

# --- 3. SELEÇÃO DE FEATURES ---
print("\n[FASE 2] Selecionando as melhores features...")
numeric_features = df.select_dtypes(include=np.number).columns.tolist()
features_to_exclude = ['Target1', 'Target2', 'Target3']
feature_candidates = [f for f in numeric_features if f not in features_to_exclude]

X_temp = df[feature_candidates].fillna(0)
selector = VarianceThreshold(threshold=0.01)
selector.fit(X_temp)
feature_cols_var = X_temp.columns[selector.get_support()].tolist()

correlations = [(col, abs(df[col].corr(df[TARGET]))) for col in feature_cols_var]
correlations = [corr for corr in correlations if not np.isnan(corr[1])]
correlations.sort(key=lambda x: x[1], reverse=True)

TOP_K = 30
selected_features = [col for col, _ in correlations[:TOP_K]]

# Interações
top3_features = selected_features[:3]
for i, f1 in enumerate(top3_features):
    for f2 in top3_features[i+1:]:
        interaction_name = f'{f1}_X_{f2}'
        df[interaction_name] = df[f1] * df[f2]
        selected_features.append(interaction_name)

selected_features = list(dict.fromkeys(selected_features))
print(f"✅ {len(selected_features)} features finais selecionadas para {TARGET}.")

# --- 4. PREPARAÇÃO FINAL E SALVAMENTO DE ARTEFATOS ---
X = df[selected_features]
y = df[TARGET]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=RANDOM_STATE)

# Scaler
scaler = RobustScaler()
X_train_scaled = scaler.fit_transform(X_train)
joblib.dump(scaler, f'{ARTIFACTS_PATH}/scaler_{TARGET.lower()}.pkl')
print(f"💾 Scaler para {TARGET} salvo em: {ARTIFACTS_PATH}/scaler_{TARGET.lower()}.pkl")

# Lista de Features
with open(f'{ARTIFACTS_PATH}/features_{TARGET.lower()}.pkl', 'wb') as f:
    pickle.dump(selected_features, f)
print(f"💾 Lista de features para {TARGET} salva em: {ARTIFACTS_PATH}/features_{TARGET.lower()}.pkl")

# --- 5. OTIMIZAÇÃO E TREINAMENTO DO MODELO (Lógica do Notebook Fase 3) ---
print(f"\n[FASE 3] Otimizando e treinando o modelo para {TARGET}...")

def objective_t1(trial):
    params = {
        'iterations': 500,
        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1, log=True),
        'depth': trial.suggest_int('depth', 3, 6),
        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 10, 100, log=True),
        'verbose': False,
        'random_seed': RANDOM_STATE
    }
    model = CatBoostRegressor(**params)
    model.fit(X_train_scaled, y_train, eval_set=[(scaler.transform(X_test), y_test)], early_stopping_rounds=50, verbose=False)
    preds = model.predict(scaler.transform(X_test))
    return r2_score(y_test, preds)

study = optuna.create_study(direction='maximize')
study.optimize(objective_t1, n_trials=50) # 50 trials for a good balance
best_params = study.best_params
best_params['iterations'] = 500 # Re-set iterations
best_params['verbose'] = False
best_params['random_seed'] = RANDOM_STATE

final_model = CatBoostRegressor(**best_params)
final_model.fit(X_train_scaled, y_train)

print(f"✅ Modelo {TARGET} treinado com R² de {study.best_value:.4f} na otimização.")

# Salvamento do Modelo
joblib.dump(final_model, f'{ARTIFACTS_PATH}/modelo_{TARGET.lower()}.pkl')
print(f"💾 Modelo para {TARGET} salvo em: {ARTIFACTS_PATH}/modelo_{TARGET.lower()}.pkl")
print("\n--- Concluído para Target 1 ---")
</file>

<file path="dashboard/backend/export_artifacts_target2.py">
# export_artifacts_target2.py

import pandas as pd
import numpy as np
import os
import pickle
import joblib
import optuna
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import RobustScaler, PolynomialFeatures
from sklearn.ensemble import RandomForestRegressor, StackingRegressor
from sklearn.linear_model import Ridge
from catboost import CatBoostRegressor
import lightgbm as lgb
import xgboost as xgb

print("="*80)
print("INICIANDO EXPORTAÇÃO DE ARTEFATOS PARA O TARGET 2")
print("="*80)

# --- 1. CONFIGURAÇÕES ---
ARTIFACTS_PATH = "ml_artifacts"
if not os.path.exists(ARTIFACTS_PATH):
    os.makedirs(ARTIFACTS_PATH)
TARGET = 'Target2'
RAW_DATA_FILE = 'JogadoresV1.xlsx'
RANDOM_STATE = 42

# --- 2. CARREGAMENTO E FEATURE ENGINEERING ---
print(f"\n[FASE 1] Carregando e processando dados de '{RAW_DATA_FILE}'...")
try:
    df = pd.read_excel(RAW_DATA_FILE)
except FileNotFoundError:
    print(f"❌ ERRO: Arquivo '{RAW_DATA_FILE}' não encontrado.")
    exit()

df.dropna(subset=[TARGET], inplace=True)

# Limpeza e FE simples
if 'F0103' in df.columns:
    df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')
if 'QtdHorasDormi' in df.columns and 'Acordar' in df.columns:
    df['sono_total'] = df['QtdHorasDormi']
    df['sono_x_acordar'] = df['QtdHorasDormi'] * df['Acordar']

p_cols = [c for c in df.columns if c.startswith('P') and any(char.isdigit() for char in c)]
t_cols = [c for c in df.columns if c.startswith('T') and any(char.isdigit() for char in c)]
f_cols = [c for c in df.columns if c.startswith('F') and len(c) > 1 and any(char.isdigit() for char in c)]

for col in p_cols + t_cols + f_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

if p_cols:
    df['P_mean'] = df[p_cols].mean(axis=1)
if t_cols:
    df['T_mean'] = df[t_cols].mean(axis=1)
if f_cols:
    df['F_mean'] = df[f_cols].mean(axis=1)

# Imputação final antes de separar
numeric_cols = df.select_dtypes(include=np.number).columns
for col in numeric_cols:
    df[col].fillna(df[col].median(), inplace=True)

print("✅ Dados processados e features base criadas.")

# --- 3. PREPARAÇÃO E SEPARAÇÃO DE DADOS ---
features_to_exclude = ['Target1', 'Target2', 'Target3', 'Código de Acesso', 'Data/Hora Último']
initial_features = [col for col in df.columns if col not in features_to_exclude and pd.api.types.is_numeric_dtype(df[col])]

X = df[initial_features]
y = df[TARGET]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=RANDOM_STATE)

# --- 4. FEATURE ENGINEERING AVANÇADA E SELEÇÃO ---
print("\n[FASE 2] Criando features polinomiais e selecionando as melhores...")
# Features Polinomiais
rf_poly_selector = RandomForestRegressor(n_estimators=100, random_state=RANDOM_STATE, n_jobs=-1)
rf_poly_selector.fit(X_train, y_train)
importances = pd.Series(rf_poly_selector.feature_importances_, index=X_train.columns).sort_values(ascending=False)
top_features_for_poly = importances.head(15).index.tolist()

poly = PolynomialFeatures(degree=2, include_bias=False, interaction_only=True)
X_train_poly = poly.fit_transform(X_train[top_features_for_poly])
poly_names = [f"poly_{name}" for name in poly.get_feature_names_out(top_features_for_poly)]
X_train_poly_df = pd.DataFrame(X_train_poly, columns=poly_names, index=X_train.index)
X_train_expanded = X_train.join(X_train_poly_df)

# Seleção Híbrida
correlations = X_train_expanded.corrwith(y_train).abs().sort_values(ascending=False)
top_corr_features = correlations.head(60).index.tolist()
rf_final_selector = RandomForestRegressor(n_estimators=100, random_state=RANDOM_STATE, n_jobs=-1)
rf_final_selector.fit(X_train_expanded, y_train)
importances_final = pd.Series(rf_final_selector.feature_importances_, index=X_train_expanded.columns).sort_values(ascending=False)
top_rf_features = importances_final.head(60).index.tolist()

final_feature_list = list(set(top_corr_features + top_rf_features))
X_train_selected = X_train_expanded[final_feature_list]

print(f"✅ {len(final_feature_list)} features finais selecionadas para {TARGET}.")

# --- 5. SALVAMENTO DE ARTEFATOS DE PRÉ-PROCESSAMENTO ---
# Scaler
scaler = RobustScaler()
scaler.fit(X_train_selected)
joblib.dump(scaler, f'{ARTIFACTS_PATH}/scaler_{TARGET.lower()}.pkl')
print(f"💾 Scaler para {TARGET} salvo.")

# Transformador Polinomial e sua lista de features
joblib.dump(poly, f'{ARTIFACTS_PATH}/poly_transformer_{TARGET.lower()}.pkl')
with open(f'{ARTIFACTS_PATH}/poly_features_list_{TARGET.lower()}.pkl', 'wb') as f:
    pickle.dump(top_features_for_poly, f)
print(f"💾 Transformador polinomial e lista de features para {TARGET} salvos.")

# Lista final de Features
with open(f'{ARTIFACTS_PATH}/features_{TARGET.lower()}.pkl', 'wb') as f:
    pickle.dump(final_feature_list, f)
print(f"💾 Lista final de features para {TARGET} salva.")


# --- 6. OTIMIZAÇÃO E TREINAMENTO DO MODELO STACKING ---
print(f"\n[FASE 3] Otimizando modelos base e treinando o Stacking para {TARGET}...")

def tune_model(model_name, X, y):
    def objective(trial):
        if model_name == 'catboost':
            params = {'iterations': trial.suggest_int('iterations', 100, 500), 'depth': trial.suggest_int('depth', 3, 7), 'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3, log=True), 'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 2, 20, log=True), 'verbose': 0}
            model = CatBoostRegressor(**params, random_state=RANDOM_STATE)
        # Adicione lgb e xgb se necessário
        score = cross_val_score(model, X, y, cv=3, scoring='r2', n_jobs=-1).mean()
        return score
    
    study = optuna.create_study(direction='maximize')
    study.optimize(objective, n_trials=30)
    print(f"  - Melhor R² CV para {model_name}: {study.best_value:.4f}")
    return study.best_params

best_catboost_params = tune_model('catboost', scaler.transform(X_train_selected), y_train)

base_models = [
    ('catboost', CatBoostRegressor(**best_catboost_params, verbose=0, random_state=RANDOM_STATE)),
    ('random_forest', RandomForestRegressor(n_estimators=150, random_state=RANDOM_STATE))
]
meta_model = Ridge(random_state=RANDOM_STATE)
stacking_model = StackingRegressor(estimators=base_models, final_estimator=meta_model, cv=5, n_jobs=-1)

stacking_model.fit(scaler.transform(X_train_selected), y_train)
print(f"✅ Modelo Stacking para {TARGET} treinado.")

# Salvamento do Modelo
joblib.dump(stacking_model, f'{ARTIFACTS_PATH}/modelo_{TARGET.lower()}.pkl')
print(f"💾 Modelo para {TARGET} salvo em: {ARTIFACTS_PATH}/modelo_{TARGET.lower()}.pkl")
print("\n--- Concluído para Target 2 ---")
</file>

<file path="dashboard/backend/export_artifacts_target3.py">
# export_artifacts_target3.py

import pandas as pd
import numpy as np
import os
import pickle
import joblib
import optuna
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import RobustScaler, PolynomialFeatures
from sklearn.ensemble import RandomForestRegressor, StackingRegressor
from sklearn.linear_model import Ridge
from catboost import CatBoostRegressor
import lightgbm as lgb
import xgboost as xgb

print("="*80)
print("INICIANDO EXPORTAÇÃO DE ARTEFATOS PARA O TARGET 3")
print("="*80)

# --- 1. CONFIGURAÇÕES ---
ARTIFACTS_PATH = "ml_artifacts"
if not os.path.exists(ARTIFACTS_PATH):
    os.makedirs(ARTIFACTS_PATH)
TARGET = 'Target3' # <- ALTERADO
RAW_DATA_FILE = 'JogadoresV1.xlsx'
RANDOM_STATE = 42

# --- 2. CARREGAMENTO E FEATURE ENGINEERING ---
print(f"\n[FASE 1] Carregando e processando dados de '{RAW_DATA_FILE}'...")
try:
    df = pd.read_excel(RAW_DATA_FILE)
except FileNotFoundError:
    print(f"❌ ERRO: Arquivo '{RAW_DATA_FILE}' não encontrado.")
    exit()

df.dropna(subset=[TARGET], inplace=True)

# Limpeza e FE simples
if 'F0103' in df.columns:
    df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')
if 'QtdHorasDormi' in df.columns and 'Acordar' in df.columns:
    df['sono_total'] = df['QtdHorasDormi']
    df['sono_x_acordar'] = df['QtdHorasDormi'] * df['Acordar']

p_cols = [c for c in df.columns if c.startswith('P') and any(char.isdigit() for char in c)]
t_cols = [c for c in df.columns if c.startswith('T') and any(char.isdigit() for char in c)]
f_cols = [c for c in df.columns if c.startswith('F') and len(c) > 1 and any(char.isdigit() for char in c)]

for col in p_cols + t_cols + f_cols:
    df[col] = pd.to_numeric(df[col], errors='coerce')

if p_cols:
    df['P_mean'] = df[p_cols].mean(axis=1)
if t_cols:
    df['T_mean'] = df[t_cols].mean(axis=1)
if f_cols:
    df['F_mean'] = df[f_cols].mean(axis=1)

# Imputação final antes de separar
numeric_cols = df.select_dtypes(include=np.number).columns
for col in numeric_cols:
    df[col].fillna(df[col].median(), inplace=True)

print("✅ Dados processados e features base criadas.")

# --- 3. PREPARAÇÃO E SEPARAÇÃO DE DADOS ---
features_to_exclude = ['Target1', 'Target2', 'Target3', 'Código de Acesso', 'Data/Hora Último']
initial_features = [col for col in df.columns if col not in features_to_exclude and pd.api.types.is_numeric_dtype(df[col])]

X = df[initial_features]
y = df[TARGET]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=RANDOM_STATE)

# --- 4. FEATURE ENGINEERING AVANÇADA E SELEÇÃO ---
print("\n[FASE 2] Criando features polinomiais e selecionando as melhores...")
# Features Polinomiais
rf_poly_selector = RandomForestRegressor(n_estimators=100, random_state=RANDOM_STATE, n_jobs=-1)
rf_poly_selector.fit(X_train, y_train)
importances = pd.Series(rf_poly_selector.feature_importances_, index=X_train.columns).sort_values(ascending=False)
top_features_for_poly = importances.head(15).index.tolist()

poly = PolynomialFeatures(degree=2, include_bias=False, interaction_only=True)
X_train_poly = poly.fit_transform(X_train[top_features_for_poly])
poly_names = [f"poly_{name}" for name in poly.get_feature_names_out(top_features_for_poly)]
X_train_poly_df = pd.DataFrame(X_train_poly, columns=poly_names, index=X_train.index)
X_train_expanded = X_train.join(X_train_poly_df)

# Seleção Híbrida
correlations = X_train_expanded.corrwith(y_train).abs().sort_values(ascending=False)
top_corr_features = correlations.head(60).index.tolist()
rf_final_selector = RandomForestRegressor(n_estimators=100, random_state=RANDOM_STATE, n_jobs=-1)
rf_final_selector.fit(X_train_expanded, y_train)
importances_final = pd.Series(rf_final_selector.feature_importances_, index=X_train_expanded.columns).sort_values(ascending=False)
top_rf_features = importances_final.head(60).index.tolist()

final_feature_list = list(set(top_corr_features + top_rf_features))
X_train_selected = X_train_expanded[final_feature_list]

print(f"✅ {len(final_feature_list)} features finais selecionadas para {TARGET}.")

# --- 5. SALVAMENTO DE ARTEFATOS DE PRÉ-PROCESSAMENTO ---
# Scaler
scaler = RobustScaler()
scaler.fit(X_train_selected)
joblib.dump(scaler, f'{ARTIFACTS_PATH}/scaler_{TARGET.lower()}.pkl') # <- NOME ALTERADO
print(f"💾 Scaler para {TARGET} salvo.")

# Transformador Polinomial e sua lista de features
joblib.dump(poly, f'{ARTIFACTS_PATH}/poly_transformer_{TARGET.lower()}.pkl') # <- NOME ALTERADO
with open(f'{ARTIFACTS_PATH}/poly_features_list_{TARGET.lower()}.pkl', 'wb') as f: # <- NOME ALTERADO
    pickle.dump(top_features_for_poly, f)
print(f"💾 Transformador polinomial e lista de features para {TARGET} salvos.")

# Lista final de Features
with open(f'{ARTIFACTS_PATH}/features_{TARGET.lower()}.pkl', 'wb') as f: # <- NOME ALTERADO
    pickle.dump(final_feature_list, f)
print(f"💾 Lista final de features para {TARGET} salva.")


# --- 6. OTIMIZAÇÃO E TREINAMENTO DO MODELO STACKING ---
print(f"\n[FASE 3] Otimizando modelos base e treinando o Stacking para {TARGET}...")

def tune_model(model_name, X, y):
    def objective(trial):
        if model_name == 'catboost':
            params = {'iterations': trial.suggest_int('iterations', 100, 500), 'depth': trial.suggest_int('depth', 3, 7), 'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3, log=True), 'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 2, 20, log=True), 'verbose': 0}
            model = CatBoostRegressor(**params, random_state=RANDOM_STATE)
        score = cross_val_score(model, X, y, cv=3, scoring='r2', n_jobs=-1).mean()
        return score
    
    study = optuna.create_study(direction='maximize')
    study.optimize(objective, n_trials=30)
    print(f"  - Melhor R² CV para {model_name}: {study.best_value:.4f}")
    return study.best_params

best_catboost_params = tune_model('catboost', scaler.transform(X_train_selected), y_train)

base_models = [
    ('catboost', CatBoostRegressor(**best_catboost_params, verbose=0, random_state=RANDOM_STATE)),
    ('random_forest', RandomForestRegressor(n_estimators=150, random_state=RANDOM_STATE))
]
meta_model = Ridge(random_state=RANDOM_STATE)
stacking_model = StackingRegressor(estimators=base_models, final_estimator=meta_model, cv=5, n_jobs=-1)

stacking_model.fit(scaler.transform(X_train_selected), y_train)
print(f"✅ Modelo Stacking para {TARGET} treinado.")

# Salvamento do Modelo
joblib.dump(stacking_model, f'{ARTIFACTS_PATH}/modelo_{TARGET.lower()}.pkl') # <- NOME ALTERADO
print(f"💾 Modelo para {TARGET} salvo em: {ARTIFACTS_PATH}/modelo_{TARGET.lower()}.pkl")
print("\n--- Concluído para Target 3 ---")
</file>

<file path="dashboard/backend/export_hibrido_target1.py">
# =============================================================================
# EXPORT HÍBRIDO - TARGET 1 (R1)
# =============================================================================
# Este script replica a SEÇÃO 2 do notebook híbrido definitivo
# Treina o modelo R1 e salva os artefatos necessários para a API

import pandas as pd
import numpy as np
import warnings
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import RobustScaler
from sklearn.feature_selection import VarianceThreshold
from catboost import CatBoostRegressor
import optuna
import joblib
import pickle
import os

warnings.filterwarnings('ignore')
optuna.logging.set_verbosity(optuna.logging.WARNING)

# Configuração de caminhos
ARTIFACTS_PATH = 'ml_artifacts'
os.makedirs(ARTIFACTS_PATH, exist_ok=True)

print("=" * 100)
print("🎯 TREINAMENTO TARGET 1 (R1) - MODELO HÍBRIDO".center(100))
print("=" * 100)

# =============================================================================
# CARREGAMENTO E PRÉ-PROCESSAMENTO
# =============================================================================

df_raw = pd.read_excel('JogadoresV3.xlsx')
df = df_raw.copy()

print(f"\n✅ Dados carregados: {len(df)} linhas")

# Converter F0103
if 'F0103' in df.columns:
    df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')

# Identificar colunas P, T, F
p_cols = [col for col in df.columns if col.startswith('P') and any(c.isdigit() for c in col)]
t_cols = [col for col in df.columns if col.startswith('T') and any(c.isdigit() for c in col)]
f_cols = [col for col in df.columns if col.startswith('F') and len(col) > 1 and any(c.isdigit() for c in col)]

# Tratar colunas duplicadas
print("\n[1/6] Tratando colunas duplicadas...")
cols = pd.Series(df.columns)
duplicated_cols = cols[cols.duplicated()].unique()

if len(duplicated_cols) > 0:
    for dup in duplicated_cols:
        indices = cols[cols == dup].index.tolist()
        for i, idx in enumerate(indices):
            cols.iloc[idx] = f'{dup}_{i}'
    df.columns = cols
    # Atualizar listas de colunas
    p_cols = [col for col in df.columns if col.startswith('P') and any(c.isdigit() for c in col)]
    t_cols = [col for col in df.columns if col.startswith('T') and any(c.isdigit() for c in col)]
    f_cols = [col for col in df.columns if col.startswith('F') and len(col) > 1 and any(c.isdigit() for c in col)]
    print(f"  ✅ Colunas duplicadas renomeadas")
else:
    print("  ✅ Sem duplicatas")

# Converter para numérico
for col in p_cols + t_cols + f_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')

# Remover outliers extremos
numeric_cols = [col for col in df.select_dtypes(include=[np.number]).columns if 'Target' not in col]
for col in numeric_cols:
    if col in df.columns:
        df.loc[df[col] < -100, col] = np.nan
        if df[col].max() > 10000:
            df.loc[df[col] > 10000, col] = np.nan

# =============================================================================
# FEATURE ENGINEERING
# =============================================================================

print("\n[2/6] Criando features comportamentais...")

# Taxa de pulos (-1)
p_minus_ones = sum((df[col] == -1).sum() for col in p_cols if col in df.columns)
t_minus_ones = sum((df[col] == -1).sum() for col in t_cols if col in df.columns)

df['taxa_pulos_P'] = p_minus_ones / len(p_cols) if len(p_cols) > 0 else 0
df['taxa_pulos_T'] = t_minus_ones / len(t_cols) if len(t_cols) > 0 else 0
df['taxa_pulos_geral'] = (p_minus_ones + t_minus_ones) / (len(p_cols) + len(t_cols))

# Substituir -1 por NaN e preencher com mediana
for col in p_cols + t_cols + f_cols:
    if col in df.columns:
        df[col] = df[col].replace(-1, np.nan)
        df[col] = df[col].replace(-1.0, np.nan)
        if df[col].isnull().sum() > 0:
            df[col].fillna(df[col].median(), inplace=True)

print("\n[3/6] Feature engineering avançado...")

# Features de SONO
if 'QtdHorasDormi' in df.columns and 'Acordar' in df.columns:
    df['sono_total'] = df['QtdHorasDormi']
    df['sono_x_acordar'] = df['QtdHorasDormi'] * df['Acordar']
    df['sono_squared'] = df['QtdHorasDormi'] ** 2
    df['sono_irregular'] = np.abs(df['QtdHorasDormi'] - df['QtdHorasDormi'].median())
    print(f"  ✅ Sono: 4 features")

# Features de PERFORMANCE
if len(p_cols) > 0:
    df['P_mean'] = df[p_cols].mean(axis=1)
    df['P_std'] = df[p_cols].std(axis=1)
    df['P_min'] = df[p_cols].min(axis=1)
    df['P_max'] = df[p_cols].max(axis=1)
    df['P_range'] = df['P_max'] - df['P_min']
    df['P_late'] = df[['P09', 'P12', 'P13', 'P15']].mean(axis=1) if all(c in df.columns for c in ['P09', 'P12', 'P13', 'P15']) else 0
    df['P_early'] = df[['P01', 'P02', 'P03', 'P04']].mean(axis=1) if all(c in df.columns for c in ['P01', 'P02', 'P03', 'P04']) else 0
    print(f"  ✅ Performance: 7 features")

# Features de TEMPO
if len(t_cols) > 0:
    df['T_mean'] = df[t_cols].mean(axis=1)
    df['T_std'] = df[t_cols].std(axis=1)
    df['T_min'] = df[t_cols].min(axis=1)
    df['T_max'] = df[t_cols].max(axis=1)
    print(f"  ✅ Tempo: 4 features")

# Features de FORMULÁRIOS
f_perfil = [c for c in f_cols if c.startswith('F01') or c.startswith('F02')]
if len(f_perfil) > 0:
    df['F_perfil_mean'] = df[f_perfil].mean(axis=1)
    df['F_perfil_std'] = df[f_perfil].std(axis=1)

f_sono = [c for c in f_cols if c.startswith('F07')]
if len(f_sono) > 0:
    df['F_sono_mean'] = df[f_sono].mean(axis=1)
    df['F_sono_std'] = df[f_sono].std(axis=1)

f_final = [c for c in f_cols if c.startswith('F11')]
if len(f_final) > 0:
    df['F_final_mean'] = df[f_final].mean(axis=1)
    df['F_final_std'] = df[f_final].std(axis=1)

df['F_mean_geral'] = df[f_cols].mean(axis=1)

# =============================================================================
# SELEÇÃO DE FEATURES
# =============================================================================

print("\n[4/6] Selecionando TOP features...")

TARGET = 'Target1'
feature_cols = [col for col in df.columns if col not in [TARGET, 'Código de Acesso', 'Data/Hora Último', 'Target2', 'Target3']
                and pd.api.types.is_numeric_dtype(df[col])]

X = df[feature_cols].fillna(0)
y = df[TARGET]

# Variance Threshold
selector = VarianceThreshold(threshold=0.01)
selector.fit(X)
feature_cols = X.columns[selector.get_support()].tolist()
X = df[feature_cols]

# Correlação com target
correlations = []
for col in feature_cols:
    corr = abs(df[col].corr(df[TARGET]))
    if not np.isnan(corr):
        correlations.append((col, corr))

correlations.sort(key=lambda x: x[1], reverse=True)

# TOP 30 features
TOP_K = min(30, len(correlations))
selected_features_r1 = [col for col, _ in correlations[:TOP_K]]

print(f"  ✅ {TOP_K} features selecionadas")

# Criar interações entre TOP 3
top3_features = [col for col, _ in correlations[:3]]
interaction_features = []

for i, f1 in enumerate(top3_features):
    for f2 in top3_features[i+1:]:
        interaction_name = f'{f1}_X_{f2}'
        df[interaction_name] = df[f1] * df[f2]
        interaction_features.append(interaction_name)

selected_features_r1.extend(interaction_features)
selected_features_r1 = list(dict.fromkeys(selected_features_r1))

print(f"  Total com interações: {len(selected_features_r1)}")

# =============================================================================
# PREPARAÇÃO DOS DADOS
# =============================================================================

print("\n[5/6] Preparando dados para treinamento...")

# Scaler
scaler_r1 = RobustScaler()
X_final = df[selected_features_r1].copy().fillna(0)
X_scaled = scaler_r1.fit_transform(X_final)

X_r1 = X_scaled
y_r1 = df[TARGET].values

# Remover NaNs
valid_idx = ~np.isnan(y_r1)
X_r1 = X_r1[valid_idx]
y_r1 = y_r1[valid_idx]

# Split
X_train_r1, X_test_r1, y_train_r1, y_test_r1 = train_test_split(X_r1, y_r1, test_size=0.25, random_state=42)

print(f"  Treino: {len(X_train_r1)} | Teste: {len(X_test_r1)}")

# =============================================================================
# OTIMIZAÇÃO E TREINAMENTO
# =============================================================================

print("\n[6/6] Otimizando hiperparâmetros (100 trials)...")

def objective_r1(trial):
    params = {
        'iterations': 500,
        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1, log=True),
        'depth': trial.suggest_int('depth', 3, 6),
        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 10, 100, log=True),
        'border_count': trial.suggest_int('border_count', 32, 128),
        'bagging_temperature': trial.suggest_float('bagging_temperature', 0.5, 1.0),
        'random_strength': trial.suggest_float('random_strength', 0.5, 2.0),
        'verbose': False,
        'random_seed': 42
    }
    model = CatBoostRegressor(**params)
    scores = cross_val_score(model, X_train_r1, y_train_r1, cv=5, scoring='r2')
    return scores.mean()

study_r1 = optuna.create_study(direction='maximize')
study_r1.optimize(objective_r1, n_trials=100, show_progress_bar=True)

best_params_r1 = study_r1.best_params
best_params_r1['iterations'] = 500
best_params_r1['verbose'] = False
best_params_r1['random_seed'] = 42

print(f"\n✅ Melhor R² CV: {study_r1.best_value:.4f}")

# Treinar modelo final
print("\n🔧 Treinando modelo final...")
model_r1 = CatBoostRegressor(**best_params_r1)
model_r1.fit(X_train_r1, y_train_r1, verbose=False)

# =============================================================================
# SALVAR ARTEFATOS
# =============================================================================

print("\n💾 Salvando artefatos...")

# Salvar modelo
joblib.dump(model_r1, f'{ARTIFACTS_PATH}/modelo_target1.pkl')
print(f"  ✅ Modelo salvo: {ARTIFACTS_PATH}/modelo_target1.pkl")

# Salvar scaler
joblib.dump(scaler_r1, f'{ARTIFACTS_PATH}/scaler_target1.pkl')
print(f"  ✅ Scaler salvo: {ARTIFACTS_PATH}/scaler_target1.pkl")

# Salvar lista de features
with open(f'{ARTIFACTS_PATH}/features_target1.pkl', 'wb') as f:
    pickle.dump(selected_features_r1, f)
print(f"  ✅ Features salvas: {ARTIFACTS_PATH}/features_target1.pkl")

print("\n" + "=" * 100)
print("✅ TARGET 1 (R1) - TREINAMENTO COMPLETO!".center(100))
print("=" * 100)
print(f"\n📦 Artefatos salvos em: {ARTIFACTS_PATH}/")
print(f"  • modelo_target1.pkl")
print(f"  • scaler_target1.pkl")
print(f"  • features_target1.pkl")
</file>

<file path="dashboard/backend/export_hibrido_target2.py">
# =============================================================================
# EXPORT HÍBRIDO - TARGET 2 (R2)
# =============================================================================
# Este script replica a SEÇÃO 3 do notebook híbrido definitivo (CORRIGIDO!)
# Treina o ENSEMBLE de 3 modelos R2 e salva os artefatos necessários para a API

import pandas as pd
import numpy as np
import warnings
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import QuantileTransformer
from sklearn.feature_selection import VarianceThreshold
from catboost import CatBoostRegressor
import optuna
import joblib
import pickle
import os

warnings.filterwarnings('ignore')
optuna.logging.set_verbosity(optuna.logging.WARNING)

# Configuração de caminhos
ARTIFACTS_PATH = 'ml_artifacts'
os.makedirs(ARTIFACTS_PATH, exist_ok=True)

print("=" * 100)
print("🎯 TREINAMENTO TARGET 2 (R2) - ENSEMBLE HÍBRIDO CORRIGIDO".center(100))
print("=" * 100)

# =============================================================================
# CARREGAMENTO E PRÉ-PROCESSAMENTO
# =============================================================================

df_raw = pd.read_excel('JogadoresV3.xlsx')
df = df_raw.copy()

TARGET = 'Target2'

print(f"\n✅ Dados carregados: {len(df)} linhas")

# Converter F0103
if 'F0103' in df.columns:
    df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')

# Identificar colunas P, T, F
p_cols = [col for col in df.columns if col.startswith('P') and any(c.isdigit() for c in col)]
t_cols = [col for col in df.columns if col.startswith('T') and any(c.isdigit() for c in col)]
f_cols = [col for col in df.columns if col.startswith('F') and len(col) > 1 and any(c.isdigit() for c in col)]

print("\n[1/5] Tratando valores -1 e NaN...")

# Converter para numérico e tratar -1
for col in p_cols + t_cols + f_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df[col] = df[col].replace(-1, np.nan)
        if df[col].isnull().sum() > 0:
            df[col].fillna(df[col].median(), inplace=True)

# =============================================================================
# FEATURE ENGINEERING MINIMALISTA
# =============================================================================

print("\n[2/5] Criando features minimalistas para R2...")

# Features de sono
if 'QtdHorasDormi' in df.columns and 'Acordar' in df.columns:
    df['sono_total'] = df['QtdHorasDormi']
    df['acordar'] = df['Acordar']

# Features de formulário sono
f_sono = [c for c in f_cols if c.startswith('F07')]
if len(f_sono) > 0:
    df['F_sono_mean'] = df[f_sono].mean(axis=1)

# Features de formulário final
f_final = [c for c in f_cols if c.startswith('F11')]
if len(f_final) > 0:
    df['F_final_mean'] = df[f_final].mean(axis=1)

# Features de performance
p_cols_exist = [c for c in p_cols if c in df.columns]
if len(p_cols_exist) > 0:
    df['P_mean'] = df[p_cols_exist].mean(axis=1)

# Preencher NaN remanescentes
numeric_cols = df.select_dtypes(include=np.number).columns
for col in numeric_cols:
    if df[col].isnull().sum() > 0:
        df[col].fillna(df[col].median(), inplace=True)

# =============================================================================
# SELEÇÃO DE FEATURES CONSERVADORA
# =============================================================================

print("\n[3/5] Seleção conservadora (≤12 features)...")

feature_cols = [col for col in df.columns if col not in [TARGET, 'Código de Acesso', 'Data/Hora Último', 'Target1', 'Target3']
                and pd.api.types.is_numeric_dtype(df[col])]

X_pre = df[feature_cols].fillna(0)
y = df[TARGET]

# Variance Threshold
selector = VarianceThreshold(threshold=0.01)
selector.fit(X_pre)
feature_cols_filtered = X_pre.columns[selector.get_support()].tolist()

# Correlação com target
correlations = []
for col in feature_cols_filtered:
    corr = df[col].corr(df[TARGET])
    if not np.isnan(corr):
        correlations.append((col, abs(corr)))

correlations.sort(key=lambda x: x[1], reverse=True)

# TOP 12 features
MAX_FEATURES = 12
selected_features_r2 = [col for col, _ in correlations[:MAX_FEATURES]]

print(f"  ✅ {len(selected_features_r2)} features selecionadas")

# Criar uma interação entre TOP 2
if len(selected_features_r2) >= 2:
    f1, f2 = selected_features_r2[0], selected_features_r2[1]
    df[f'{f1}_X_{f2}'] = df[f1] * df[f2]
    selected_features_r2.append(f'{f1}_X_{f2}')

# =============================================================================
# PREPARAÇÃO DOS DADOS
# =============================================================================

print("\n[4/5] Preparando dados...")

X_r2 = df[selected_features_r2].copy()
y_r2 = df[TARGET].values

# Remover NaNs
valid_idx = ~np.isnan(y_r2)
X_r2 = X_r2[valid_idx]
y_r2 = y_r2[valid_idx]

print(f"  Dados: {len(X_r2)} amostras × {len(selected_features_r2)} features")

# =============================================================================
# OTIMIZAÇÃO
# =============================================================================

print("\n[5/5] Otimização brutal (150 trials)...")

def objective_r2(trial):
    params = {
        'iterations': trial.suggest_int('iterations', 300, 700),
        'learning_rate': trial.suggest_float('learning_rate', 0.001, 0.03, log=True),
        'depth': trial.suggest_int('depth', 2, 3),
        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 50, 300, log=True),
        'border_count': trial.suggest_int('border_count', 16, 48),
        'bagging_temperature': trial.suggest_float('bagging_temperature', 0.0, 0.5),
        'random_strength': trial.suggest_float('random_strength', 2.0, 5.0),
        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 5, 15),
        'verbose': False,
        'random_seed': 42
    }

    X_tr_opt, X_te_opt, y_tr_opt, y_te_opt = train_test_split(X_r2, y_r2, test_size=0.25, random_state=42)
    scaler_temp = QuantileTransformer(output_distribution='normal', random_state=42)
    X_tr_scaled = scaler_temp.fit_transform(X_tr_opt)

    model = CatBoostRegressor(**params)
    scores = cross_val_score(model, X_tr_scaled, y_tr_opt, cv=5, scoring='r2')
    return scores.mean()

study_r2 = optuna.create_study(direction='maximize')
study_r2.optimize(objective_r2, n_trials=150, show_progress_bar=True)

best_params_r2 = study_r2.best_params
best_params_r2['verbose'] = False
best_params_r2['random_seed'] = 42

print(f"\n✅ Melhor R² CV: {study_r2.best_value:.4f}")

# =============================================================================
# TREINAMENTO DO ENSEMBLE (3 MODELOS) - VERSÃO CORRIGIDA
# =============================================================================

print("\n🚀 Treinando ensemble (3 modelos)...")
print("  ✅ Cada modelo treina com seed diferente (diversidade)")

# SPLIT BASE COMUM (para consistência do scaler)
X_train_base, X_test_base, y_train_base, y_test_base = train_test_split(
    X_r2, y_r2, test_size=0.25, random_state=42
)

# SCALER BASE COMUM
scaler_base = QuantileTransformer(output_distribution='normal', random_state=42)
X_train_base_scaled = scaler_base.fit_transform(X_train_base)
X_test_base_scaled = scaler_base.transform(X_test_base)

models_r2 = []

for i, seed in enumerate([42, 123, 456], 1):
    print(f"\n  Treinando Modelo {i} (seed={seed})...")
    
    # Cada modelo treina com seed diferente para diversidade
    X_tr_div, X_te_div, y_tr_div, y_te_div = train_test_split(X_r2, y_r2, test_size=0.25, random_state=seed)
    scaler_div = QuantileTransformer(output_distribution='normal', random_state=42)
    X_tr_div_scaled = scaler_div.fit_transform(X_tr_div)
    
    # Treinar modelo
    params_i = best_params_r2.copy()
    params_i['random_seed'] = seed
    model_i = CatBoostRegressor(**params_i)
    model_i.fit(X_tr_div_scaled, y_tr_div, verbose=False)
    
    models_r2.append(model_i)
    print(f"  ✅ Modelo {i} treinado!")

# =============================================================================
# SALVAR ARTEFATOS
# =============================================================================

print("\n💾 Salvando artefatos...")

# Salvar os 3 modelos do ensemble
for i, model in enumerate(models_r2):
    joblib.dump(model, f'{ARTIFACTS_PATH}/modelo_target2_ensemble_{i}.pkl')
    print(f"  ✅ Modelo {i+1} salvo: {ARTIFACTS_PATH}/modelo_target2_ensemble_{i}.pkl")

# Salvar o scaler (QuantileTransformer)
joblib.dump(scaler_base, f'{ARTIFACTS_PATH}/scaler_target2.pkl')
print(f"  ✅ Scaler salvo: {ARTIFACTS_PATH}/scaler_target2.pkl")

# Salvar a lista de features
with open(f'{ARTIFACTS_PATH}/features_target2.pkl', 'wb') as f:
    pickle.dump(selected_features_r2, f)
print(f"  ✅ Features salvas: {ARTIFACTS_PATH}/features_target2.pkl")

print("\n" + "=" * 100)
print("✅ TARGET 2 (R2) - ENSEMBLE COMPLETO!".center(100))
print("=" * 100)
print(f"\n📦 Artefatos salvos em: {ARTIFACTS_PATH}/")
print(f"  • modelo_target2_ensemble_0.pkl")
print(f"  • modelo_target2_ensemble_1.pkl")
print(f"  • modelo_target2_ensemble_2.pkl")
print(f"  • scaler_target2.pkl (QuantileTransformer)")
print(f"  • features_target2.pkl")
print(f"\n💡 NOTA: A API fará a média das predições dos 3 modelos")
</file>

<file path="dashboard/backend/export_hibrido_target3.py">
# =============================================================================
# EXPORT HÍBRIDO - TARGET 3 (R3)
# =============================================================================
# Este script replica a SEÇÃO 4 do notebook híbrido definitivo (CORRIGIDO!)
# Treina o ENSEMBLE de 3 modelos R3 e salva os artefatos necessários para a API

import pandas as pd
import numpy as np
import warnings
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import RobustScaler
from catboost import CatBoostRegressor
import optuna
import joblib
import pickle
import os

warnings.filterwarnings('ignore')
optuna.logging.set_verbosity(optuna.logging.WARNING)

# Configuração de caminhos
ARTIFACTS_PATH = 'ml_artifacts'
os.makedirs(ARTIFACTS_PATH, exist_ok=True)

print("=" * 100)
print("🎯 TREINAMENTO TARGET 3 (R3) - ENSEMBLE HÍBRIDO CORRIGIDO".center(100))
print("=" * 100)

# =============================================================================
# CARREGAMENTO E PRÉ-PROCESSAMENTO
# =============================================================================

df_raw = pd.read_excel('JogadoresV3.xlsx')
df = df_raw.copy()

TARGET = 'Target3'

print(f"\n✅ Dados carregados: {len(df)} linhas")

# Converter F0103
if 'F0103' in df.columns:
    df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')

# Identificar colunas P, T, F
p_cols = [col for col in df.columns if col.startswith('P') and any(c.isdigit() for c in col)]
t_cols = [col for col in df.columns if col.startswith('T') and any(c.isdigit() for c in col)]
f_cols = [col for col in df.columns if col.startswith('F') and len(col) > 1 and any(c.isdigit() for c in col)]

print("\n[1/5] Tratando valores -1 e NaN...")

# Converter para numérico e tratar -1
for col in p_cols + t_cols + f_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df[col] = df[col].replace(-1, np.nan)
        if df[col].isnull().sum() > 0:
            df[col].fillna(df[col].median(), inplace=True)

# =============================================================================
# FEATURE ENGINEERING
# =============================================================================

print("\n[2/5] Feature engineering para R3...")

# Features de Performance
df['P_mean'] = df[p_cols].mean(axis=1)
df['P_std'] = df[p_cols].std(axis=1)
df['P_late'] = df[['P09', 'P12', 'P13', 'P15']].mean(axis=1) if all(c in df.columns for c in ['P09', 'P12', 'P13', 'P15']) else 0
df['P_early'] = df[['P01', 'P02', 'P03', 'P04']].mean(axis=1) if all(c in df.columns for c in ['P01', 'P02', 'P03', 'P04']) else 0

# Features de Tempo
df['T_mean'] = df[t_cols].mean(axis=1)
df['T_std'] = df[t_cols].std(axis=1)

# Features de Sono
if 'QtdHorasSono' in df.columns:
    f_sono = [c for c in f_cols if '07' in c]
    df['F_sono_mean'] = df[f_sono].mean(axis=1)
    df['F_sono_std'] = df[f_sono].std(axis=1)
    df['F_sono_max'] = df[f_sono].max(axis=1)
    if 'Acordar' in df.columns:
        df['sono_x_acordar'] = df['QtdHorasSono'] * df['Acordar']
        df['acordar_squared'] = df['Acordar'] ** 2

# Features de Formulário Final
f_final = [c for c in f_cols if '11' in c]
df['F_final_mean'] = df[f_final].mean(axis=1)

print("  ✅ Features criadas!")

# =============================================================================
# SELEÇÃO DE FEATURES
# =============================================================================

print("\n[3/5] Seleção TOP 15 features...")

# Pool de features com correlação > 0.35
feature_pool = []
for col in df.columns:
    if col not in [TARGET, 'Código de Acesso', 'Target1', 'Target2'] and df[col].dtype in ['float64', 'int64']:
        corr = abs(df[col].corr(df[TARGET]))
        if not np.isnan(corr) and corr > 0.35:
            feature_pool.append((col, corr))

feature_pool.sort(key=lambda x: x[1], reverse=True)
selected_features_r3 = [f[0] for f in feature_pool[:15]]

print(f"  ✅ {len(selected_features_r3)} features selecionadas")

# Criar interação
if 'F1103' in selected_features_r3 and 'P_mean' in selected_features_r3:
    df['F1103_X_P_mean'] = df['F1103'] * df['P_mean']
    selected_features_r3.append('F1103_X_P_mean')

# =============================================================================
# PREPARAÇÃO DOS DADOS
# =============================================================================

print("\n[4/5] Preparando dados...")

X_r3 = df[selected_features_r3].fillna(df[selected_features_r3].median())
y_r3 = df[TARGET].values

print(f"  Dados: {len(X_r3)} amostras × {len(selected_features_r3)} features")

# =============================================================================
# OTIMIZAÇÃO
# =============================================================================

print("\n[5/5] Otimização (100 trials)...")

def objective_r3(trial):
    X_tr_opt, X_te_opt, y_tr_opt, y_te_opt = train_test_split(X_r3, y_r3, test_size=0.25, random_state=42)
    scaler_temp = RobustScaler()
    X_tr_scaled = scaler_temp.fit_transform(X_tr_opt)

    params = {
        'iterations': trial.suggest_int('iterations', 200, 800),
        'learning_rate': trial.suggest_float('learning_rate', 0.005, 0.05, log=True),
        'depth': 2,
        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 120, 180),
        'border_count': trial.suggest_int('border_count', 16, 128),
        'bagging_temperature': trial.suggest_float('bagging_temperature', 0, 1),
        'random_strength': trial.suggest_float('random_strength', 0.5, 5),
        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 8, 15),
        'random_seed': 42,
        'verbose': False
    }
    model = CatBoostRegressor(**params)
    scores = cross_val_score(model, X_tr_scaled, y_tr_opt, cv=3, scoring='r2')
    return scores.mean()

study_r3 = optuna.create_study(direction='maximize')
study_r3.optimize(objective_r3, n_trials=100, show_progress_bar=True)

best_params_r3 = study_r3.best_params
best_params_r3['depth'] = 2
best_params_r3['verbose'] = False
best_params_r3['random_seed'] = 42

print(f"\n✅ Melhor R² CV: {study_r3.best_value:.4f}")

# =============================================================================
# TREINAMENTO DO ENSEMBLE (3 MODELOS) - VERSÃO CORRIGIDA
# =============================================================================

print("\n🚀 Treinando ensemble (3 modelos)...")
print("  ✅ Cada modelo treina com seed diferente (diversidade)")

# SPLIT BASE COMUM (para consistência do scaler)
X_train_base_r3, X_test_base_r3, y_train_base_r3, y_test_base_r3 = train_test_split(
    X_r3, y_r3, test_size=0.25, random_state=42
)

# SCALER BASE COMUM
scaler_base_r3 = RobustScaler()
X_train_base_r3_scaled = scaler_base_r3.fit_transform(X_train_base_r3)
X_test_base_r3_scaled = scaler_base_r3.transform(X_test_base_r3)

models_r3 = []

for i, seed in enumerate([42, 123, 456], 1):
    print(f"\n  Treinando Modelo {i} (seed={seed})...")
    
    # Cada modelo treina com seed diferente para diversidade
    X_tr_div, X_te_div, y_tr_div, y_te_div = train_test_split(X_r3, y_r3, test_size=0.25, random_state=seed)
    scaler_div = RobustScaler()
    X_tr_div_scaled = scaler_div.fit_transform(X_tr_div)
    
    # Treinar modelo
    params_i = best_params_r3.copy()
    params_i['random_seed'] = seed
    model_i = CatBoostRegressor(**params_i)
    model_i.fit(X_tr_div_scaled, y_tr_div, verbose=False)
    
    models_r3.append(model_i)
    print(f"  ✅ Modelo {i} treinado!")

# =============================================================================
# SALVAR ARTEFATOS
# =============================================================================

print("\n💾 Salvando artefatos...")

# Salvar os 3 modelos do ensemble
for i, model in enumerate(models_r3):
    joblib.dump(model, f'{ARTIFACTS_PATH}/modelo_target3_ensemble_{i}.pkl')
    print(f"  ✅ Modelo {i+1} salvo: {ARTIFACTS_PATH}/modelo_target3_ensemble_{i}.pkl")

# Salvar o scaler (RobustScaler)
joblib.dump(scaler_base_r3, f'{ARTIFACTS_PATH}/scaler_target3.pkl')
print(f"  ✅ Scaler salvo: {ARTIFACTS_PATH}/scaler_target3.pkl")

# Salvar a lista de features
with open(f'{ARTIFACTS_PATH}/features_target3.pkl', 'wb') as f:
    pickle.dump(selected_features_r3, f)
print(f"  ✅ Features salvas: {ARTIFACTS_PATH}/features_target3.pkl")

print("\n" + "=" * 100)
print("✅ TARGET 3 (R3) - ENSEMBLE COMPLETO!".center(100))
print("=" * 100)
print(f"\n📦 Artefatos salvos em: {ARTIFACTS_PATH}/")
print(f"  • modelo_target3_ensemble_0.pkl")
print(f"  • modelo_target3_ensemble_1.pkl")
print(f"  • modelo_target3_ensemble_2.pkl")
print(f"  • scaler_target3.pkl (RobustScaler)")
print(f"  • features_target3.pkl")
print(f"\n💡 NOTA: A API fará a média das predições dos 3 modelos")
</file>

<file path="dashboard/backend/models.py">
# models.py
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from database import Base

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True, nullable=False)
    password_hash = Column(String, nullable=False)
    predictions = relationship('Prediction', backref='user', lazy=True)

class Prediction(Base):
    __tablename__ = 'predictions'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    upload_timestamp = Column(DateTime, nullable=False, default=func.now())
    jogador_id = Column(String, nullable=False)
    pred_t1 = Column(Float, nullable=False)
    pred_t2 = Column(Float, nullable=False)
    pred_t3 = Column(Float, nullable=False)
</file>

<file path="dashboard/backend/README.md">
# Backend API (FastAPI)

Esta API serve como o cérebro do projeto, lidando com autenticação, processamento de dados e previsões de Machine Learning.

## Principais Funcionalidades

-   **Autenticação JWT:** Sistema de registro (`/register`) e login (`/login`) que gera tokens JWT para proteger os endpoints.
-   **Endpoint de Previsão (`/predict`):** Recebe um arquivo `.xlsx` com novos dados de jogadores, aplica o mesmo pipeline de pré-processamento dos modelos treinados e retorna as previsões para os 3 targets.
-   **Análise SHAP:** Junto com as previsões, a API calcula os valores SHAP para cada jogador, permitindo entender a contribuição de cada feature para o resultado.
-   **Histórico de Previsões (`/history`):** Salva cada lote de previsões no banco de dados, associado ao usuário que fez o upload.
-   **Análise do Modelo (`/feature_importance`):** Expõe a importância geral das features para cada modelo.

## Principais Endpoints

-   `POST /register`: Cria um novo usuário.
-   `POST /login`: Autentica um usuário e retorna um token de acesso.
-   `POST /predict`: (Protegido) Recebe um arquivo Excel e retorna as previsões e dados SHAP.
-   `GET /history`: (Protegido) Retorna o histórico de uploads do usuário logado.
-   `GET /feature_importance`: (Protegido) Retorna a importância das features para cada modelo.
-   `GET /health`: Verifica a saúde da aplicação, incluindo o carregamento dos modelos de ML.
</file>

<file path="dashboard/backend/schemas.py">
# schemas.py
from pydantic import BaseModel

class UserCreate(BaseModel):
    username: str
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str
</file>

<file path="dashboard/frontend/README.md">
# Frontend Dashboard (Plotly Dash)

Este é um dashboard interativo construído com Plotly Dash para fornecer uma interface amigável para o sistema de previsão.

## Funcionalidades

O dashboard é dividido em abas:

1.  **Nova Previsão:**
    -   Permite o upload de um arquivo `.xlsx` com novos dados de jogadores.
    -   Exibe os resultados em uma tabela interativa (ordenável, filtrável) e em gráficos de barras comparativos.
    -   Disponibiliza um botão para download dos resultados.
    -   Apresenta uma seção de análise SHAP, onde é possível selecionar um jogador e visualizar gráficos que explicam sua previsão.

2.  **Análise do Modelo:**
    -   Exibe gráficos de barras horizontais mostrando as 20 features mais importantes para cada um dos 3 modelos de target.

3.  **Histórico:**
    -   Mostra uma tabela com o histórico de uploads de arquivos realizados pelo usuário, incluindo data e quantidade de jogadores previstos em cada lote.
</file>

<file path="dashboard/README.md">
# Projeto Daruma: Previsão de Targets de Jogadores

Este projeto é a solução para o Desafio Final de Ciclo, que consiste em construir um sistema de Machine Learning completo para prever 3 targets numéricos com base nos dados de jogadores.

A solução inclui um pipeline de treinamento de modelos, uma API backend para servir as previsões e um dashboard interativo para visualização e análise dos resultados.

## Arquitetura

O projeto é conteinerizado com Docker e orquestrado com Docker Compose, seguindo a arquitetura abaixo:

```
Frontend (Plotly Dash) <--> Backend (FastAPI) <--> Database (PostgreSQL)
```

-   **Frontend:** Um dashboard interativo onde o usuário pode fazer upload de novos dados, visualizar previsões, análises de importância de features e explicações de predição individuais com SHAP.
-   **Backend:** Uma API RESTful construída com FastAPI que lida com autenticação de usuários, recebe os dados, executa o pipeline de pré-processamento e predição usando modelos pré-treinados, e salva os resultados.
-   **Database:** Um banco de dados PostgreSQL para armazenar informações de usuários e histórico de previsões.
-   **ML Training:** Scripts Python para treinar os modelos de Machine Learning, realizar a otimização de hiperparâmetros e exportar os artefatos (modelos, scalers, listas de features) necessários para a API.

## Estrutura do Projeto

```
.
├── backend/            # Código da API FastAPI
│   ├── ml_artifacts/   # Artefatos de ML (modelos, scalers, etc.)
│   └── ...
├── frontend/           # Código do Dashboard em Dash
│   └── ...
├── .env                # Arquivo de configuração de ambiente (NÃO COMMITAR)
├── .gitignore
├── docker-compose.yml
└── README.md
```

## Como Executar

**Pré-requisitos:**
*   Docker
*   Docker Compose

**Passo 1: Preparar os Modelos de ML**

# Pipeline de Treinamento de Modelos

Esta parte contém os scripts responsáveis pelo treinamento, otimização e exportação dos modelos de Machine Learning. Pois, os modelos precisam ser treinados antes de iniciar a aplicação.

# Navegue até a pasta backend
cd backend

# Instale as dependências
pip install -r requirements.txt

# Certifique-se que o excel para treinamento 'JogadoresV1.xlsx' esteja na mesma pasta e Execute os scripts de treinamento para gerar os artefatos
python export_artifacts_target1.py
python export_artifacts_target2.py
python export_artifacts_target3.py

## Funcionamento
Cada script `export_artifacts_target<N>.py` é um pipeline completo para um dos três targets. O processo geral inclui:

1.  **Carregamento e Limpeza:** Os dados do arquivo `JogadoresV1.xlsx` são carregados. Valores ausentes são tratados (imputação por mediana) e tipos de dados são corrigidos.
2.  **Engenharia de Features:** Novas features são criadas a partir das existentes (médias, interações, features polinomiais) para aumentar o poder preditivo do modelo.
3.  **Seleção de Features:** Técnicas como `VarianceThreshold`, correlação com o target e importância de features de um `RandomForest` são usadas para selecionar as variáveis mais relevantes.
4.  **Otimização de Hiperparâmetros:** A biblioteca `Optuna` é utilizada para encontrar os melhores hiperparâmetros para os modelos (ex: `CatBoost`), maximizando a métrica `R2 Score` em validação cruzada.
5.  **Treinamento Final:** O modelo é treinado com os melhores parâmetros em todo o conjunto de dados de treino.
6.  **Exportação de Artefatos:** O modelo treinado, o `scaler` (para normalização) e a lista de features utilizadas são salvos como arquivos `.pkl` na pasta `backend/ml_artifacts`.

# Volte para a raiz do projeto
cd ..
```
Isso criará a pasta `backend/ml_artifacts` com todos os arquivos `.pkl` necessários.

**Passo 2: Configurar o Ambiente**

Crie uma cópia do arquivo `.env.example` (que você deve criar) e renomeie para `.env`. Preencha com suas configurações, principalmente uma `JWT_SECRET_KEY` segura.

**Passo 3: Iniciar a Aplicação**

Com o Docker em execução, rode o seguinte comando na raiz do projeto:

```bash
docker-compose up --build
```

A aplicação estará disponível nos seguintes endereços:
-   **Dashboard:** `http://localhost:8050`
-   **API (documentação):** `http://localhost:5000/docs`
</file>

<file path="notebooks/PROJETOFINAL.ipynb">
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tuhH-znyFcGf",
        "outputId": "c0c316ca-190e-4ac9-c8fb-99b0987ab8ae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/175.3 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m174.1/175.3 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m175.3/175.3 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h✅ Bibliotecas instaladas!\n",
            "================================================================================\n",
            "     FASE 2 OTIMIZADA: LIMPEZA E PREPARAÇÃO (VERSÃO MELHORADA)\n",
            "================================================================================\n",
            "📋 Categóricas: 21 | Targets: 3\n",
            "\n",
            "================================================================================\n",
            "ETAPA 0: CARREGANDO DADOS\n",
            "================================================================================\n",
            "✅ Carregado: 183 linhas, 114 colunas\n",
            "\n",
            "================================================================================\n",
            "ETAPA 1: REMOÇÃO DE NEGATIVOS → NaN\n",
            "================================================================================\n",
            "✅ 108 negativos convertidos → NaN\n",
            "\n",
            "================================================================================\n",
            "ETAPA 2: ANÁLISE DE MISSING\n",
            "================================================================================\n",
            "🗑️  Removendo 7 colunas (>70% missing)\n",
            "✅ Shape: (183, 107)\n",
            "\n",
            "================================================================================\n",
            "ETAPA 3: REMOÇÃO DE JOGADORES SEM TARGETS\n",
            "================================================================================\n",
            "✅ Jogadores mantidos: 173 (removidos: 10)\n",
            "\n",
            "================================================================================\n",
            "ETAPA 4: IMPUTAÇÃO\n",
            "================================================================================\n",
            "✅ 90 numéricas imputadas (mediana)\n",
            "✅ 17 categóricas imputadas (moda)\n",
            "\n",
            "================================================================================\n",
            "ETAPA 5: TRATAMENTO DE OUTLIERS\n",
            "================================================================================\n",
            "✅ 727 outliers tratados (substituídos por mediana)\n",
            "\n",
            "================================================================================\n",
            "ETAPA 6: ONE-HOT ENCODING\n",
            "================================================================================\n",
            "✅ One-Hot concluído: 107 → 355 colunas\n",
            "\n",
            "================================================================================\n",
            "ETAPA 7: FEATURE ENGINEERING\n",
            "================================================================================\n",
            "✅ F11_mean criada (8 colunas)\n",
            "✅ F07_mean criada (9 colunas)\n",
            "\n",
            "================================================================================\n",
            "🔧 CORREÇÃO 1: CONVERSÃO BOOL → INT\n",
            "================================================================================\n",
            "📋 Convertendo 265 colunas booleanas...\n",
            "✅ VERDADEIRO/FALSO → 1/0\n",
            "   Exemplo: ['Cor0202_000000', 'Cor0202_3E3200', 'Cor0202_552D2D']\n",
            "\n",
            "================================================================================\n",
            "ETAPA 8: FEATURE SELECTION\n",
            "================================================================================\n",
            "📊 Features disponíveis: 347\n",
            "✅ Features mantidas: 54 (threshold=0.2)\n",
            "✅ Features removidas: 293\n",
            "\n",
            "🏆 TOP 10 FEATURES:\n",
            "    1. F07_mean                       | Corr: 0.6025\n",
            "    2. F1105                          | Corr: 0.5670\n",
            "    3. F1107                          | Corr: 0.5448\n",
            "    4. F1101                          | Corr: 0.5363\n",
            "    5. F0708                          | Corr: 0.5349\n",
            "    6. F0711                          | Corr: 0.5341\n",
            "    7. Acordar                        | Corr: 0.5263\n",
            "    8. F1109                          | Corr: 0.5226\n",
            "    9. F0710                          | Corr: 0.5146\n",
            "   10. F0707                          | Corr: 0.5088\n",
            "\n",
            "================================================================================\n",
            "ETAPA 9: CRIAÇÃO DOS DATAFRAMES FINAIS\n",
            "================================================================================\n",
            "✅ DataFrame NÃO-NORMALIZADO: (173, 57)\n",
            "🔢 Numéricas a normalizar: 25\n",
            "📝 Categóricas (preservadas): 29\n",
            "✅ Normalização concluída!\n",
            "✅ DataFrame NORMALIZADO: (173, 57)\n",
            "\n",
            "================================================================================\n",
            "ETAPA 10: EXPORTAÇÃO\n",
            "================================================================================\n",
            "✅ Arquivo 'Dados_Otimizados_V4.xlsx' criado!\n",
            "\n",
            "================================================================================\n",
            "🎉 FASE 2 OTIMIZADA CONCLUÍDA!\n",
            "================================================================================\n",
            "\n",
            "📊 RESUMO:\n",
            "   Jogadores: 173\n",
            "   Features: 54\n",
            "   Targets: 3\n",
            "\n",
            "🔧 MELHORIAS APLICADAS:\n",
            "   ✅ BOOL convertidas para INT (0/1)\n",
            "   ✅ Clusterização REMOVIDA (não agregava valor)\n",
            "   ✅ Pipeline otimizado\n",
            "\n",
            "📁 ARQUIVO GERADO: Dados_Otimizados_V4.xlsx\n",
            "   Aba 1: Dados_Para_Analise\n",
            "   Aba 2: Dados_Para_Modelo ⭐ (usar este!)\n",
            "   Aba 3: Resumo_Estatistico\n",
            "   Aba 4: Correlacoes\n",
            "\n",
            "🚀 PRÓXIMO PASSO: FASE 3 OTIMIZADA\n",
            "   Use: Dados_Para_Modelo\n"
          ]
        }
      ],
      "source": [
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# FASE 2 OTIMIZADA: PIPELINE COM MELHORIAS APLICADAS\n",
        "# 🔧 CORREÇÕES IMPLEMENTADAS:\n",
        "#    ✅ Conversão BOOL → INT (problema crítico resolvido!)\n",
        "#    ✅ Remoção de features de cluster (não agregavam valor)\n",
        "#    ✅ Código otimizado e mais rápido\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 1: INSTALAÇÃO\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "!pip install xlsxwriter openpyxl scikit-learn -q\n",
        "print(\"✅ Bibliotecas instaladas!\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 2: IMPORTS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from datetime import datetime\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "print(\"=\" * 80)\n",
        "print(\"     FASE 2 OTIMIZADA: LIMPEZA E PREPARAÇÃO (VERSÃO MELHORADA)\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 3: DEFINIÇÕES\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "COLUNAS_CATEGORICAS = [\n",
        "    'Cor0202', 'Cor0204', 'Cor0206', 'Cor0208', 'Cor0209Outro',\n",
        "    'P01', 'P02', 'P03', 'P04', 'P05', 'P07', 'P08', 'P09', 'P10',\n",
        "    'P12', 'P13', 'P15', 'P12_1', 'P02_1', 'P03_1', 'P09_1'\n",
        "]\n",
        "\n",
        "COLUNAS_TARGETS = ['Target1', 'Target2', 'Target3']\n",
        "\n",
        "COLUNAS_IGNORAR = [\n",
        "    'Código de Acesso', 'Data/Hora Último',\n",
        "    'L0210 (não likert)',\n",
        "    'F0299 - Explicação Tempo', 'T0499 - Explicação Tempo',\n",
        "    'PTempoTotalExpl', 'T1199Expl', 'T1205Expl', 'T1210Expl',\n",
        "    'TempoTotalExpl'\n",
        "]\n",
        "\n",
        "print(f\"📋 Categóricas: {len(COLUNAS_CATEGORICAS)} | Targets: {len(COLUNAS_TARGETS)}\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 4: CARREGAR DADOS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 0: CARREGANDO DADOS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "df = pd.read_excel('JogadoresV1.xlsx')\n",
        "print(f\"✅ Carregado: {df.shape[0]} linhas, {df.shape[1]} colunas\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 5: TRATAMENTO F0103 (vírgula → ponto)\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "if 'F0103' in df.columns and df['F0103'].dtype == 'object':\n",
        "    print(\"\\n🔧 Convertendo F0103 (vírgula → ponto)\")\n",
        "    df['F0103'] = df['F0103'].str.replace(',', '.').astype(float)\n",
        "    print(\"   ✅ Convertido!\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 6: REMOÇÃO DE NEGATIVOS (TODOS!)\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 1: REMOÇÃO DE NEGATIVOS → NaN\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "colunas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()\n",
        "colunas_numericas = [col for col in colunas_numericas if col not in COLUNAS_TARGETS]\n",
        "\n",
        "contador = 0\n",
        "for col in colunas_numericas:\n",
        "    negativos = (df[col] < 0).sum()\n",
        "    if negativos > 0:\n",
        "        df.loc[df[col] < 0, col] = np.nan\n",
        "        contador += negativos\n",
        "\n",
        "print(f\"✅ {contador} negativos convertidos → NaN\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 7: REMOÇÃO DE COLUNAS COM MUITO MISSING\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 2: ANÁLISE DE MISSING\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "missing_info = pd.DataFrame({\n",
        "    'Coluna': df.columns,\n",
        "    'Missing': df.isna().sum(),\n",
        "    'Percentual': (df.isna().sum() / len(df) * 100).round(2)\n",
        "})\n",
        "missing_info = missing_info[missing_info['Missing'] > 0].sort_values('Percentual', ascending=False)\n",
        "\n",
        "threshold = 70\n",
        "colunas_remover = missing_info[missing_info['Percentual'] > threshold]['Coluna'].tolist()\n",
        "\n",
        "if colunas_remover:\n",
        "    print(f\"🗑️  Removendo {len(colunas_remover)} colunas (>{threshold}% missing)\")\n",
        "    df = df.drop(columns=colunas_remover)\n",
        "\n",
        "print(f\"✅ Shape: {df.shape}\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 8: REMOÇÃO DE JOGADORES SEM TARGETS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 3: REMOÇÃO DE JOGADORES SEM TARGETS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "antes = len(df)\n",
        "df = df.dropna(subset=COLUNAS_TARGETS, how='all')\n",
        "depois = len(df)\n",
        "\n",
        "print(f\"✅ Jogadores mantidos: {depois} (removidos: {antes-depois})\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 9: IMPUTAÇÃO DE VALORES FALTANTES\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 4: IMPUTAÇÃO\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "# Numéricas: MEDIANA\n",
        "colunas_num_imputar = [\n",
        "    col for col in df.select_dtypes(include=[np.number]).columns\n",
        "    if col not in COLUNAS_TARGETS and col not in COLUNAS_IGNORAR\n",
        "]\n",
        "\n",
        "if colunas_num_imputar:\n",
        "    imputer_num = SimpleImputer(strategy='median')\n",
        "    df[colunas_num_imputar] = imputer_num.fit_transform(df[colunas_num_imputar])\n",
        "    print(f\"✅ {len(colunas_num_imputar)} numéricas imputadas (mediana)\")\n",
        "\n",
        "# Categóricas: MODA\n",
        "colunas_cat_imputar = [col for col in COLUNAS_CATEGORICAS if col in df.columns]\n",
        "\n",
        "if colunas_cat_imputar:\n",
        "    imputer_cat = SimpleImputer(strategy='most_frequent')\n",
        "    df[colunas_cat_imputar] = imputer_cat.fit_transform(df[colunas_cat_imputar])\n",
        "    print(f\"✅ {len(colunas_cat_imputar)} categóricas imputadas (moda)\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 10: TRATAMENTO DE OUTLIERS (IQR + MEDIANA)\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 5: TRATAMENTO DE OUTLIERS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "colunas_outliers = [\n",
        "    col for col in colunas_num_imputar\n",
        "    if col not in ['QtdHorasSono', 'QtdHorasDormi', 'Acordar']\n",
        "]\n",
        "\n",
        "outliers_tratados = 0\n",
        "for col in colunas_outliers:\n",
        "    Q1 = df[col].quantile(0.25)\n",
        "    Q3 = df[col].quantile(0.75)\n",
        "    IQR = Q3 - Q1\n",
        "\n",
        "    limite_inf = Q1 - 1.5 * IQR\n",
        "    limite_sup = Q3 + 1.5 * IQR\n",
        "\n",
        "    outliers_mask = (df[col] < limite_inf) | (df[col] > limite_sup)\n",
        "    n_outliers = outliers_mask.sum()\n",
        "\n",
        "    if n_outliers > 0:\n",
        "        mediana = df[col].median()\n",
        "        df.loc[outliers_mask, col] = mediana\n",
        "        outliers_tratados += n_outliers\n",
        "\n",
        "print(f\"✅ {outliers_tratados} outliers tratados (substituídos por mediana)\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 11: ONE-HOT ENCODING\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 6: ONE-HOT ENCODING\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "colunas_cat_presentes = [col for col in COLUNAS_CATEGORICAS if col in df.columns]\n",
        "\n",
        "if colunas_cat_presentes:\n",
        "    colunas_antes = df.shape[1]\n",
        "    df = pd.get_dummies(df, columns=colunas_cat_presentes, prefix=colunas_cat_presentes, drop_first=False)\n",
        "    colunas_depois = df.shape[1]\n",
        "\n",
        "    print(f\"✅ One-Hot concluído: {colunas_antes} → {colunas_depois} colunas\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 12: FEATURE ENGINEERING (Agregações)\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 7: FEATURE ENGINEERING\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "# Agregação F11*\n",
        "f11_cols = [c for c in df.columns if c.startswith('F11') and pd.api.types.is_numeric_dtype(df[c])]\n",
        "if len(f11_cols) > 2:\n",
        "    df['F11_mean'] = df[f11_cols].mean(axis=1)\n",
        "    print(f\"✅ F11_mean criada ({len(f11_cols)} colunas)\")\n",
        "\n",
        "# Agregação F07*\n",
        "f07_cols = [c for c in df.columns if c.startswith('F07') and pd.api.types.is_numeric_dtype(df[c])]\n",
        "if len(f07_cols) > 2:\n",
        "    df['F07_mean'] = df[f07_cols].mean(axis=1)\n",
        "    print(f\"✅ F07_mean criada ({len(f07_cols)} colunas)\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 13: 🔧 CORREÇÃO 1 - CONVERTER BOOL → INT\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"🔧 CORREÇÃO 1: CONVERSÃO BOOL → INT\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "bool_cols = df.select_dtypes(include=['bool']).columns.tolist()\n",
        "\n",
        "if bool_cols:\n",
        "    print(f\"📋 Convertendo {len(bool_cols)} colunas booleanas...\")\n",
        "    df[bool_cols] = df[bool_cols].astype(int)\n",
        "    print(f\"✅ VERDADEIRO/FALSO → 1/0\")\n",
        "    print(f\"   Exemplo: {bool_cols[:3]}\")\n",
        "else:\n",
        "    print(\"ℹ️  Nenhuma coluna booleana encontrada\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 14: FEATURE SELECTION POR CORRELAÇÃO\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 8: FEATURE SELECTION\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "features_numericas_finais = [\n",
        "    col for col in df.columns\n",
        "    if col not in COLUNAS_TARGETS\n",
        "    and col not in COLUNAS_IGNORAR\n",
        "    and pd.api.types.is_numeric_dtype(df[col])\n",
        "]\n",
        "\n",
        "print(f\"📊 Features disponíveis: {len(features_numericas_finais)}\")\n",
        "\n",
        "corr_t1 = df[features_numericas_finais].corrwith(df['Target1']).abs()\n",
        "corr_t2 = df[features_numericas_finais].corrwith(df['Target2']).abs()\n",
        "corr_t3 = df[features_numericas_finais].corrwith(df['Target3']).abs()\n",
        "\n",
        "corr_mean = (corr_t1 + corr_t2 + corr_t3) / 3\n",
        "\n",
        "threshold = 0.20\n",
        "features_selecionadas = corr_mean[corr_mean > threshold].index.tolist()\n",
        "\n",
        "print(f\"✅ Features mantidas: {len(features_selecionadas)} (threshold={threshold})\")\n",
        "print(f\"✅ Features removidas: {len(features_numericas_finais) - len(features_selecionadas)}\")\n",
        "\n",
        "# Top 10\n",
        "print(f\"\\n🏆 TOP 10 FEATURES:\")\n",
        "top10 = corr_mean.sort_values(ascending=False).head(10)\n",
        "for idx, (feat, corr) in enumerate(top10.items(), 1):\n",
        "    print(f\"   {idx:2d}. {feat:30s} | Corr: {corr:.4f}\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 15: CRIAR DATAFRAMES FINAIS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 9: CRIAÇÃO DOS DATAFRAMES FINAIS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "df_final_nao_normalizado = df[features_selecionadas + COLUNAS_TARGETS].copy()\n",
        "print(f\"✅ DataFrame NÃO-NORMALIZADO: {df_final_nao_normalizado.shape}\")\n",
        "\n",
        "df_final_normalizado = df_final_nao_normalizado.copy()\n",
        "\n",
        "# Identificar categóricas (One-Hot) para NÃO normalizar\n",
        "features_cat_onehot = [\n",
        "    col for col in features_selecionadas\n",
        "    if any(cat in col for cat in COLUNAS_CATEGORICAS)\n",
        "]\n",
        "\n",
        "features_numericas_normalizar = [\n",
        "    col for col in features_selecionadas\n",
        "    if col not in features_cat_onehot\n",
        "]\n",
        "\n",
        "print(f\"🔢 Numéricas a normalizar: {len(features_numericas_normalizar)}\")\n",
        "print(f\"📝 Categóricas (preservadas): {len(features_cat_onehot)}\")\n",
        "\n",
        "if features_numericas_normalizar:\n",
        "    scaler = StandardScaler()\n",
        "    df_final_normalizado[features_numericas_normalizar] = scaler.fit_transform(\n",
        "        df_final_normalizado[features_numericas_normalizar]\n",
        "    )\n",
        "    print(f\"✅ Normalização concluída!\")\n",
        "\n",
        "print(f\"✅ DataFrame NORMALIZADO: {df_final_normalizado.shape}\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 16: EXPORTAR PARA EXCEL\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 10: EXPORTAÇÃO\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "output_file = 'Dados_Otimizados_V4.xlsx'\n",
        "\n",
        "writer = pd.ExcelWriter(output_file, engine='xlsxwriter')\n",
        "workbook = writer.book\n",
        "\n",
        "header_format = workbook.add_format({\n",
        "    'bold': True, 'text_wrap': True, 'valign': 'vcenter',\n",
        "    'align': 'center', 'fg_color': '#1F4E78',\n",
        "    'font_color': 'white', 'border': 1\n",
        "})\n",
        "\n",
        "title_format = workbook.add_format({\n",
        "    'bold': True, 'font_size': 16,\n",
        "    'fg_color': '#4472C4', 'font_color': 'white',\n",
        "    'align': 'center', 'valign': 'vcenter', 'border': 2\n",
        "})\n",
        "\n",
        "# Aba 1: Dados não-normalizados\n",
        "df_final_nao_normalizado.to_excel(writer, sheet_name='Dados_Para_Analise', index=False, startrow=2)\n",
        "worksheet1 = writer.sheets['Dados_Para_Analise']\n",
        "worksheet1.merge_range('A1:Z1', '📋 DADOS LIMPOS - Versão Otimizada', title_format)\n",
        "worksheet1.freeze_panes(3, 0)\n",
        "\n",
        "# Aba 2: Dados normalizados\n",
        "df_final_normalizado.to_excel(writer, sheet_name='Dados_Para_Modelo', index=False, startrow=2)\n",
        "worksheet2 = writer.sheets['Dados_Para_Modelo']\n",
        "worksheet2.merge_range('A1:Z1', '📊 DADOS NORMALIZADOS - Para ML', title_format)\n",
        "worksheet2.freeze_panes(3, 0)\n",
        "\n",
        "# Aba 3: Resumo estatístico\n",
        "summary = df_final_nao_normalizado[COLUNAS_TARGETS].describe().T\n",
        "summary.to_excel(writer, sheet_name='Resumo_Estatistico', startrow=2)\n",
        "worksheet3 = writer.sheets['Resumo_Estatistico']\n",
        "worksheet3.merge_range('A1:I1', '📊 RESUMO ESTATÍSTICO', title_format)\n",
        "\n",
        "# Aba 4: Correlações\n",
        "correlations_df = pd.DataFrame({\n",
        "    'Feature': corr_mean.index,\n",
        "    'Corr_Target1': corr_t1.values,\n",
        "    'Corr_Target2': corr_t2.values,\n",
        "    'Corr_Target3': corr_t3.values,\n",
        "    'Corr_Media': corr_mean.values,\n",
        "    'Mantida': ['✅' if f in features_selecionadas else '❌' for f in corr_mean.index]\n",
        "}).sort_values('Corr_Media', ascending=False)\n",
        "\n",
        "correlations_df.to_excel(writer, sheet_name='Correlacoes', index=False, startrow=2)\n",
        "worksheet4 = writer.sheets['Correlacoes']\n",
        "worksheet4.merge_range('A1:F1', '🔍 ANÁLISE DE CORRELAÇÕES', title_format)\n",
        "\n",
        "writer.close()\n",
        "\n",
        "print(f\"✅ Arquivo '{output_file}' criado!\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 17: RELATÓRIO FINAL\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"🎉 FASE 2 OTIMIZADA CONCLUÍDA!\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "print(f\"\\n📊 RESUMO:\")\n",
        "print(f\"   Jogadores: {len(df_final_nao_normalizado)}\")\n",
        "print(f\"   Features: {len(features_selecionadas)}\")\n",
        "print(f\"   Targets: {len(COLUNAS_TARGETS)}\")\n",
        "\n",
        "print(f\"\\n🔧 MELHORIAS APLICADAS:\")\n",
        "print(f\"   ✅ BOOL convertidas para INT (0/1)\")\n",
        "print(f\"   ✅ Clusterização REMOVIDA (não agregava valor)\")\n",
        "print(f\"   ✅ Pipeline otimizado\")\n",
        "\n",
        "print(f\"\\n📁 ARQUIVO GERADO: {output_file}\")\n",
        "print(f\"   Aba 1: Dados_Para_Analise\")\n",
        "print(f\"   Aba 2: Dados_Para_Modelo ⭐ (usar este!)\")\n",
        "print(f\"   Aba 3: Resumo_Estatistico\")\n",
        "print(f\"   Aba 4: Correlacoes\")\n",
        "\n",
        "print(f\"\\n🚀 PRÓXIMO PASSO: FASE 3 OTIMIZADA\")\n",
        "print(f\"   Use: Dados_Para_Modelo\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# FASE 3 COMPLETA: MODELAGEM AVANÇADA + VISUALIZAÇÕES DETALHADAS\n",
        "# 🔧 COMBINA O MELHOR DAS DUAS VERSÕES:\n",
        "#    ✅ 8 Algoritmos testados (incluindo LightGBM e CatBoost)\n",
        "#    ✅ Gráfico de Dispersão (Previsto vs. Real) para os melhores modelos\n",
        "#    ✅ Gráfico de Feature Importance para os melhores modelos\n",
        "#    ✅ Salva os modelos e gera um relatório final completo\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 1: INSTALAÇÃO DE BIBLIOTECAS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "!pip install xgboost lightgbm catboost scikit-learn pandas matplotlib seaborn plotly -q\n",
        "print(\"✅ Bibliotecas instaladas com sucesso!\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 2: IMPORTAÇÃO DE BIBLIOTECAS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "from sklearn.model_selection import train_test_split, cross_val_score\n",
        "from sklearn.linear_model import LinearRegression, Ridge\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import xgboost as xgb\n",
        "import lightgbm as lgb\n",
        "from catboost import CatBoostRegressor\n",
        "import pickle\n",
        "\n",
        "warnings.filterwarnings('ignore')\n",
        "sns.set_style('whitegrid')\n",
        "\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"     FASE 3 COMPLETA: MODELAGEM AVANÇADA + VISUALIZAÇÕES\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 3: CARREGAMENTO DOS DADOS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 1: CARREGANDO DADOS LIMPOS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "# MUDE O NOME DO ARQUIVO AQUI SE NECESSÁRIO:\n",
        "df = pd.read_excel('Dados_para_modelo.xlsx')\n",
        "\n",
        "print(f\"✅ Dados carregados com sucesso. Shape: {df.shape}\")\n",
        "print(f\"   Total de Jogadores: {len(df)}\")\n",
        "print(f\"   Total de Colunas: {len(df.columns)}\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 4: SEPARAÇÃO DE FEATURES (X) E TARGETS (y)\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 2: SEPARAÇÃO DE FEATURES E TARGETS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "targets = ['Target1', 'Target2', 'Target3']\n",
        "X = df.drop(columns=targets)\n",
        "y1 = df['Target1']\n",
        "y2 = df['Target2']\n",
        "y3 = df['Target3']\n",
        "\n",
        "print(f\"✅ Features (X) separadas. Total de features: {X.shape[1]}\")\n",
        "print(f\"✅ Targets (y1, y2, y3) separados.\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 5: DIVISÃO EM DADOS DE TREINO E TESTE (80/20)\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 3: DIVISÃO TREINO/TESTE\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "X_train, X_test, y1_train, y1_test = train_test_split(X, y1, test_size=0.2, random_state=42)\n",
        "_, _, y2_train, y2_test = train_test_split(X, y2, test_size=0.2, random_state=42)\n",
        "_, _, y3_train, y3_test = train_test_split(X, y3, test_size=0.2, random_state=42)\n",
        "\n",
        "print(f\"✅ Dados divididos em 80% treino e 20% teste.\")\n",
        "print(f\"   Tamanho do treino: {len(X_train)} jogadores\")\n",
        "print(f\"   Tamanho do teste:  {len(X_test)} jogadores\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 6: DEFINIÇÃO DOS MODELOS A SEREM TESTADOS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 4: DEFINIÇÃO DOS MODELOS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "modelos = {\n",
        "    'Linear Regression': LinearRegression(),\n",
        "    'Ridge': Ridge(alpha=1.0),\n",
        "    'Random Forest': RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42, n_jobs=-1),\n",
        "    'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, max_depth=5, random_state=42),\n",
        "    'XGBoost': xgb.XGBRegressor(n_estimators=100, max_depth=6, learning_rate=0.1, random_state=42, n_jobs=-1),\n",
        "    'LightGBM': lgb.LGBMRegressor(n_estimators=100, max_depth=6, learning_rate=0.1, random_state=42, n_jobs=-1, verbose=-1),\n",
        "    'CatBoost': CatBoostRegressor(iterations=100, depth=6, learning_rate=0.1, random_state=42, verbose=False)\n",
        "}\n",
        "print(f\"✅ {len(modelos)} modelos definidos para teste.\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 7: FUNÇÃO DE TREINAMENTO E AVALIAÇÃO\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "def treinar_avaliar_modelo(modelo, X_train, X_test, y_train, y_test):\n",
        "    \"\"\"Função para treinar, prever e avaliar um modelo, retornando as métricas e o modelo treinado.\"\"\"\n",
        "    modelo.fit(X_train, y_train)\n",
        "    y_pred = modelo.predict(X_test)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    return {'modelo': modelo, 'y_pred': y_pred, 'r2': r2, 'rmse': rmse, 'mae': mae}\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 8: TREINAMENTO E AVALIAÇÃO DE TODOS OS MODELOS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 5: TREINAMENTO E AVALIAÇÃO DOS MODELOS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "# --- Target 1 ---\n",
        "resultados_t1 = {}\n",
        "for nome, modelo in modelos.items():\n",
        "    resultados_t1[nome] = treinar_avaliar_modelo(type(modelo)(**modelo.get_params()), X_train, X_test, y1_train, y1_test)\n",
        "melhor_t1 = max(resultados_t1.items(), key=lambda x: x[1]['r2'])\n",
        "print(f\"🎯 Target 1 | Melhor Modelo: {melhor_t1[0]:<20} | R² = {melhor_t1[1]['r2']:.4f}\")\n",
        "\n",
        "# --- Target 2 ---\n",
        "resultados_t2 = {}\n",
        "for nome, modelo in modelos.items():\n",
        "    resultados_t2[nome] = treinar_avaliar_modelo(type(modelo)(**modelo.get_params()), X_train, X_test, y2_train, y2_test)\n",
        "melhor_t2 = max(resultados_t2.items(), key=lambda x: x[1]['r2'])\n",
        "print(f\"🎯 Target 2 | Melhor Modelo: {melhor_t2[0]:<20} | R² = {melhor_t2[1]['r2']:.4f}\")\n",
        "\n",
        "# --- Target 3 ---\n",
        "resultados_t3 = {}\n",
        "for nome, modelo in modelos.items():\n",
        "    resultados_t3[nome] = treinar_avaliar_modelo(type(modelo)(**modelo.get_params()), X_train, X_test, y3_train, y3_test)\n",
        "melhor_t3 = max(resultados_t3.items(), key=lambda x: x[1]['r2'])\n",
        "print(f\"🎯 Target 3 | Melhor Modelo: {melhor_t3[0]:<20} | R² = {melhor_t3[1]['r2']:.4f}\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 9: VISUALIZAÇÃO 1 - PREVISTO vs. REAL (Gráfico de Dispersão)\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 6: VISUALIZAÇÃO - PREVISTO vs. REAL\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "fig, axes = plt.subplots(1, 3, figsize=(18, 5))\n",
        "fig.suptitle('Análise de Previsão vs. Valor Real para os Melhores Modelos', fontsize=16, fontweight='bold')\n",
        "\n",
        "# Gráfico para Target 1\n",
        "y1_pred = melhor_t1[1]['y_pred']\n",
        "axes[0].scatter(y1_test, y1_pred, alpha=0.7, color='blue', edgecolors='k')\n",
        "axes[0].plot([y1_test.min(), y1_test.max()], [y1_test.min(), y1_test.max()], 'r--', lw=2, label='Linha Perfeita')\n",
        "axes[0].set_xlabel('Valores Reais', fontsize=12)\n",
        "axes[0].set_ylabel('Valores Previstos', fontsize=12)\n",
        "axes[0].set_title(f'Target 1 - {melhor_t1[0]}\\nR²={melhor_t1[1][\"r2\"]:.3f}', fontsize=14)\n",
        "axes[0].legend()\n",
        "axes[0].grid(True)\n",
        "\n",
        "# Gráfico para Target 2\n",
        "y2_pred = melhor_t2[1]['y_pred']\n",
        "axes[1].scatter(y2_test, y2_pred, alpha=0.7, color='green', edgecolors='k')\n",
        "axes[1].plot([y2_test.min(), y2_test.max()], [y2_test.min(), y2_test.max()], 'r--', lw=2, label='Linha Perfeita')\n",
        "axes[1].set_xlabel('Valores Reais', fontsize=12)\n",
        "axes[1].set_ylabel('Valores Previstos', fontsize=12)\n",
        "axes[1].set_title(f'Target 2 - {melhor_t2[0]}\\nR²={melhor_t2[1][\"r2\"]:.3f}', fontsize=14)\n",
        "axes[1].legend()\n",
        "axes[1].grid(True)\n",
        "\n",
        "# Gráfico para Target 3\n",
        "y3_pred = melhor_t3[1]['y_pred']\n",
        "axes[2].scatter(y3_test, y3_pred, alpha=0.7, color='purple', edgecolors='k')\n",
        "axes[2].plot([y3_test.min(), y3_test.max()], [y3_test.min(), y3_test.max()], 'r--', lw=2, label='Linha Perfeita')\n",
        "axes[2].set_xlabel('Valores Reais', fontsize=12)\n",
        "axes[2].set_ylabel('Valores Previstos', fontsize=12)\n",
        "axes[2].set_title(f'Target 3 - {melhor_t3[0]}\\nR²={melhor_t3[1][\"r2\"]:.3f}', fontsize=14)\n",
        "axes[2].legend()\n",
        "axes[2].grid(True)\n",
        "\n",
        "plt.tight_layout(rect=[0, 0, 1, 0.96])\n",
        "plt.savefig('grafico_dispersao_previsto_vs_real.png', dpi=300, bbox_inches='tight')\n",
        "print(\"✅ Gráfico de Dispersão (Previsto vs. Real) salvo como 'grafico_dispersao_previsto_vs_real.png'\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 10: VISUALIZAÇÃO 2 - IMPORTÂNCIA DAS FEATURES\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 7: VISUALIZAÇÃO - IMPORTÂNCIA DAS FEATURES\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "def plotar_importancia(melhor_modelo_info, target_name, feature_names, ax):\n",
        "    \"\"\"Função auxiliar para plotar a importância das features em um eixo do matplotlib.\"\"\"\n",
        "    nome_modelo = melhor_modelo_info[0]\n",
        "    modelo = melhor_modelo_info[1]['modelo']\n",
        "\n",
        "    if hasattr(modelo, 'feature_importances_'):\n",
        "        importances = modelo.feature_importances_\n",
        "    else: # CatBoost\n",
        "        importances = modelo.get_feature_importance()\n",
        "\n",
        "    df_importances = pd.DataFrame({'feature': feature_names, 'importance': importances}).sort_values('importance', ascending=True).tail(15)\n",
        "\n",
        "    ax.barh(df_importances['feature'], df_importances['importance'], color='darkcyan')\n",
        "    ax.set_title(f'Top 15 Features - {target_name}\\n(Modelo: {nome_modelo})', fontsize=14)\n",
        "    ax.set_xlabel('Importância')\n",
        "\n",
        "fig, axes = plt.subplots(1, 3, figsize=(20, 8))\n",
        "fig.suptitle('Análise de Importância das Features para os Melhores Modelos', fontsize=16, fontweight='bold')\n",
        "\n",
        "plotar_importancia(melhor_t1, 'Target 1', X.columns, axes[0])\n",
        "plotar_importancia(melhor_t2, 'Target 2', X.columns, axes[1])\n",
        "plotar_importancia(melhor_t3, 'Target 3', X.columns, axes[2])\n",
        "\n",
        "plt.tight_layout(rect=[0, 0, 1, 0.95])\n",
        "plt.savefig('grafico_feature_importance.png', dpi=300, bbox_inches='tight')\n",
        "print(\"✅ Gráfico de Importância das Features salvo como 'grafico_feature_importance.png'\")\n",
        "\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 11: SALVANDO OS MELHORES MODELOS\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"ETAPA 8: SALVANDO OS MELHORES MODELOS\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "with open('modelo_target1_final.pkl', 'wb') as f: pickle.dump(melhor_t1[1]['modelo'], f)\n",
        "print(f\"✅ Modelo para Target 1 ({melhor_t1[0]}) salvo como 'modelo_target1_final.pkl'\")\n",
        "\n",
        "with open('modelo_target2_final.pkl', 'wb') as f: pickle.dump(melhor_t2[1]['modelo'], f)\n",
        "print(f\"✅ Modelo para Target 2 ({melhor_t2[0]}) salvo como 'modelo_target2_final.pkl'\")\n",
        "\n",
        "with open('modelo_target3_final.pkl', 'wb') as f: pickle.dump(melhor_t3[1]['modelo'], f)\n",
        "print(f\"✅ Modelo para Target 3 ({melhor_t3[0]}) salvo como 'modelo_target3_final.pkl'\")\n",
        "\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "# CÉLULA 12: RELATÓRIO FINAL\n",
        "# ═══════════════════════════════════════════════════════════════════\n",
        "print(\"\\n\" + \"=\" * 80)\n",
        "print(\"🎉 FASE 3 COMPLETA - RELATÓRIO FINAL 🎉\")\n",
        "print(\"=\" * 80)\n",
        "\n",
        "print(\"\\n📊 RESUMO DOS MELHORES MODELOS:\\n\")\n",
        "\n",
        "print(f\"  TARGET 1\")\n",
        "print(f\"  - Melhor Modelo: {melhor_t1[0]}\")\n",
        "print(f\"  - R² (R-quadrado): {melhor_t1[1]['r2']:.4f}  (Explica ~{melhor_t1[1]['r2']:.1%} da variância)\")\n",
        "print(f\"  - RMSE (Erro Médio): {melhor_t1[1]['rmse']:.2f} pontos\")\n",
        "print(f\"  - MAE (Erro Absoluto Médio): {melhor_t1[1]['mae']:.2f} pontos\\n\")\n",
        "\n",
        "print(f\"  TARGET 2\")\n",
        "print(f\"  - Melhor Modelo: {melhor_t2[0]}\")\n",
        "print(f\"  - R² (R-quadrado): {melhor_t2[1]['r2']:.4f}  (Explica ~{melhor_t2[1]['r2']:.1%} da variância)\")\n",
        "print(f\"  - RMSE (Erro Médio): {melhor_t2[1]['rmse']:.2f} pontos\")\n",
        "print(f\"  - MAE (Erro Absoluto Médio): {melhor_t2[1]['mae']:.2f} pontos\\n\")\n",
        "\n",
        "print(f\"  TARGET 3\")\n",
        "print(f\"  - Melhor Modelo: {melhor_t3[0]}\")\n",
        "print(f\"  - R² (R-quadrado): {melhor_t3[1]['r2']:.4f}  (Explica ~{melhor_t3[1]['r2']:.1%} da variância)\")\n",
        "print(f\"  - RMSE (Erro Médio): {melhor_t3[1]['rmse']:.2f} pontos\")\n",
        "print(f\"  - MAE (Erro Absoluto Médio): {melhor_t3[1]['mae']:.2f} pontos\\n\")\n",
        "\n",
        "print(\"📁 ARQUIVOS GERADOS:\")\n",
        "print(\"  ✅ modelo_target1_final.pkl\")\n",
        "print(\"  ✅ modelo_target2_final.pkl\")\n",
        "print(\"  ✅ modelo_target3_final.pkl\")\n",
        "print(\"  ✅ grafico_dispersao_previsto_vs_real.png\")\n",
        "print(\"  ✅ grafico_feature_importance.png\")\n",
        "\n",
        "print(\"\\n🚀 PRÓXIMOS PASSOS:\")\n",
        "print(\"  1. Usar os arquivos '.pkl' salvos para carregar os modelos no seu backend (Node.js/FastAPI).\")\n",
        "print(\"  2. Criar as rotas da API que recebem novos dados de jogadores e usam os modelos para prever os targets.\")\n",
        "print(\"  3. Desenvolver o dashboard interativo que consome essa API e exibe os resultados e insights.\")\n",
        "print(\"  4. Preparar a apresentação de slides contando a história do projeto, dos dados aos resultados.\")\n",
        "\n",
        "print(\"\\n✨ Excelente trabalho! A etapa de modelagem e análise está concluída. ✨\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "qrrGV7ZrGYVu",
        "outputId": "f887f2ae-d192-4602-9d5d-bd8c4dd445b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Bibliotecas instaladas com sucesso!\n",
            "\n",
            "================================================================================\n",
            "     FASE 3 COMPLETA: MODELAGEM AVANÇADA + VISUALIZAÇÕES\n",
            "================================================================================\n",
            "\n",
            "================================================================================\n",
            "ETAPA 1: CARREGANDO DADOS LIMPOS\n",
            "================================================================================\n",
            "✅ Dados carregados com sucesso. Shape: (173, 57)\n",
            "   Total de Jogadores: 173\n",
            "   Total de Colunas: 57\n",
            "\n",
            "================================================================================\n",
            "ETAPA 2: SEPARAÇÃO DE FEATURES E TARGETS\n",
            "================================================================================\n",
            "✅ Features (X) separadas. Total de features: 54\n",
            "✅ Targets (y1, y2, y3) separados.\n",
            "\n",
            "================================================================================\n",
            "ETAPA 3: DIVISÃO TREINO/TESTE\n",
            "================================================================================\n",
            "✅ Dados divididos em 80% treino e 20% teste.\n",
            "   Tamanho do treino: 138 jogadores\n",
            "   Tamanho do teste:  35 jogadores\n",
            "\n",
            "================================================================================\n",
            "ETAPA 4: DEFINIÇÃO DOS MODELOS\n",
            "================================================================================\n",
            "✅ 7 modelos definidos para teste.\n",
            "\n",
            "================================================================================\n",
            "ETAPA 5: TREINAMENTO E AVALIAÇÃO DOS MODELOS\n",
            "================================================================================\n",
            "🎯 Target 1 | Melhor Modelo: CatBoost             | R² = 0.5766\n",
            "🎯 Target 2 | Melhor Modelo: Random Forest        | R² = 0.4057\n",
            "🎯 Target 3 | Melhor Modelo: Random Forest        | R² = 0.4198\n",
            "\n",
            "================================================================================\n",
            "ETAPA 6: VISUALIZAÇÃO - PREVISTO vs. REAL\n",
            "================================================================================\n",
            "✅ Gráfico de Dispersão (Previsto vs. Real) salvo como 'grafico_dispersao_previsto_vs_real.png'\n",
            "\n",
            "================================================================================\n",
            "ETAPA 7: VISUALIZAÇÃO - IMPORTÂNCIA DAS FEATURES\n",
            "================================================================================\n",
            "✅ Gráfico de Importância das Features salvo como 'grafico_feature_importance.png'\n",
            "\n",
            "================================================================================\n",
            "ETAPA 8: SALVANDO OS MELHORES MODELOS\n",
            "================================================================================\n",
            "✅ Modelo para Target 1 (CatBoost) salvo como 'modelo_target1_final.pkl'\n",
            "✅ Modelo para Target 2 (Random Forest) salvo como 'modelo_target2_final.pkl'\n",
            "✅ Modelo para Target 3 (Random Forest) salvo como 'modelo_target3_final.pkl'\n",
            "\n",
            "================================================================================\n",
            "🎉 FASE 3 COMPLETA - RELATÓRIO FINAL 🎉\n",
            "================================================================================\n",
            "\n",
            "📊 RESUMO DOS MELHORES MODELOS:\n",
            "\n",
            "  TARGET 1\n",
            "  - Melhor Modelo: CatBoost\n",
            "  - R² (R-quadrado): 0.5766  (Explica ~57.7% da variância)\n",
            "  - RMSE (Erro Médio): 16.25 pontos\n",
            "  - MAE (Erro Absoluto Médio): 13.75 pontos\n",
            "\n",
            "  TARGET 2\n",
            "  - Melhor Modelo: Random Forest\n",
            "  - R² (R-quadrado): 0.4057  (Explica ~40.6% da variância)\n",
            "  - RMSE (Erro Médio): 22.05 pontos\n",
            "  - MAE (Erro Absoluto Médio): 18.98 pontos\n",
            "\n",
            "  TARGET 3\n",
            "  - Melhor Modelo: Random Forest\n",
            "  - R² (R-quadrado): 0.4198  (Explica ~42.0% da variância)\n",
            "  - RMSE (Erro Médio): 16.37 pontos\n",
            "  - MAE (Erro Absoluto Médio): 14.50 pontos\n",
            "\n",
            "📁 ARQUIVOS GERADOS:\n",
            "  ✅ modelo_target1_final.pkl\n",
            "  ✅ modelo_target2_final.pkl\n",
            "  ✅ modelo_target3_final.pkl\n",
            "  ✅ grafico_dispersao_previsto_vs_real.png\n",
            "  ✅ grafico_feature_importance.png\n",
            "\n",
            "🚀 PRÓXIMOS PASSOS:\n",
            "  1. Usar os arquivos '.pkl' salvos para carregar os modelos no seu backend (Node.js/FastAPI).\n",
            "  2. Criar as rotas da API que recebem novos dados de jogadores e usam os modelos para prever os targets.\n",
            "  3. Desenvolver o dashboard interativo que consome essa API e exibe os resultados e insights.\n",
            "  4. Preparar a apresentação de slides contando a história do projeto, dos dados aos resultados.\n",
            "\n",
            "✨ Excelente trabalho! A etapa de modelagem e análise está concluída. ✨\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x800 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
</file>

<file path="dashboard/backend/main.py">
# main.py (COM MODELO HÍBRIDO - VERSÃO FINAL)

import os
import pickle
import joblib
import pandas as pd
import numpy as np
import shap
from fastapi import FastAPI, Depends, HTTPException, UploadFile, File, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from sqlalchemy import func
import crud
import models
import schemas
import auth
import database
from sklearn.ensemble import StackingRegressor
from flask_bcrypt import Bcrypt
from core import app
from io import BytesIO

# Cria tabelas no DB (se não existirem) ao iniciar
try:
    models.Base.metadata.create_all(bind=database.engine)
except Exception as e:
    print(f"Aviso: Não foi possível criar tabelas do DB na inicialização (pode ser normal se já existirem): {e}")

# --- Carregamento de Artefatos de ML (ATUALIZADO PARA MODELO HÍBRIDO) ---
ARTIFACTS_PATH = os.getenv('ARTIFACTS_PATH', 'ml_artifacts')
MODELS, SCALERS, FEATURES, EXPLAINERS = {}, {}, {}, {}

try:
    # Target 1 (modelo único - mantém compatibilidade)
    MODELS['target1'] = joblib.load(f"{ARTIFACTS_PATH}/modelo_target1.pkl")
    SCALERS['target1'] = joblib.load(f"{ARTIFACTS_PATH}/scaler_target1.pkl")
    with open(f"{ARTIFACTS_PATH}/features_target1.pkl", "rb") as f:
        FEATURES['target1'] = pickle.load(f)
    EXPLAINERS['target1'] = shap.TreeExplainer(MODELS['target1'])

    # Targets 2 e 3 (ensemble de 3 modelos cada - NOVA ESTRUTURA)
    for target in ['target2', 'target3']:
        MODELS[target] = []
        for i in range(3): # Carrega os 3 modelos do ensemble
            model = joblib.load(f"{ARTIFACTS_PATH}/modelo_{target}_ensemble_{i}.pkl")
            MODELS[target].append(model)
        
        SCALERS[target] = joblib.load(f"{ARTIFACTS_PATH}/scaler_{target}.pkl")
        with open(f"{ARTIFACTS_PATH}/features_{target}.pkl", "rb") as f:
            FEATURES[target] = pickle.load(f)
        
        # Cria um explainer para cada modelo do ensemble
        EXPLAINERS[target] = [shap.TreeExplainer(m) for m in MODELS[target]]

    print("✅ Artefatos de ML e Explainers HÍBRIDOS carregados com sucesso.")
except Exception as e:
    print(f"❌ ERRO CRÍTICO ao carregar artefatos de ML: {e}")
    MODELS = None # Invalida para a verificação de saúde da API

# --- Funções de Pré-processamento ATUALIZADAS (Modelo Híbrido) ---

def preprocess_target1(df_input):
    """Pré-processamento específico para Target 1 (modelo único)"""
    df = df_input.copy()
    
    # Conversão de F0103
    if 'F0103' in df.columns: 
        df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')
    
    # Identificação de colunas
    p_cols = [c for c in df.columns if c.startswith('P') and any(char.isdigit() for char in c)]
    t_cols = [c for c in df.columns if c.startswith('T') and any(char.isdigit() for char in c)]
    f_cols = [c for c in df.columns if c.startswith('F') and len(c) > 1 and any(char.isdigit() for char in c)]
    
    # Engenharia de features - taxas de pulos
    p_minus_ones = sum((df[col] == -1).sum() for col in p_cols if col in df.columns)
    t_minus_ones = sum((df[col] == -1).sum() for col in t_cols if col in df.columns)
    df['taxa_pulos_P'] = p_minus_ones / len(p_cols) if len(p_cols) > 0 else 0
    df['taxa_pulos_T'] = t_minus_ones / len(t_cols) if len(t_cols) > 0 else 0
    df['taxa_pulos_geral'] = (p_minus_ones + t_minus_ones) / (len(p_cols) + len(t_cols)) if (len(p_cols) + len(t_cols)) > 0 else 0

    # Processamento de colunas numéricas
    for col in p_cols + t_cols + f_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').replace(-1, np.nan)
            df[col].fillna(df[col].median(), inplace=True)
            
    # Features de sono
    if 'QtdHorasDormi' in df.columns and 'Acordar' in df.columns:
        df['sono_total'] = df['QtdHorasDormi']
        df['sono_x_acordar'] = df['QtdHorasDormi'] * df['Acordar']
        df['sono_squared'] = df['QtdHorasDormi'] ** 2
        df['sono_irregular'] = np.abs(df['QtdHorasDormi'] - df['QtdHorasDormi'].median())

    # Estatísticas das colunas P
    if p_cols: 
        df['P_mean'] = df[p_cols].mean(axis=1)
        df['P_std'] = df[p_cols].std(axis=1)
        df['P_min'] = df[p_cols].min(axis=1)
        df['P_max'] = df[p_cols].max(axis=1)
        df['P_range'] = df['P_max'] - df['P_min']
        df['P_late'] = df[['P09', 'P12', 'P13', 'P15']].mean(axis=1) if all(c in df.columns for c in ['P09', 'P12', 'P13', 'P15']) else 0
        df['P_early'] = df[['P01', 'P02', 'P03', 'P04']].mean(axis=1) if all(c in df.columns for c in ['P01', 'P02', 'P03', 'P04']) else 0
    
    # Estatísticas das colunas T
    if t_cols: 
        df['T_mean'] = df[t_cols].mean(axis=1)
        df['T_std'] = df[t_cols].std(axis=1)
        df['T_min'] = df[t_cols].min(axis=1)
        df['T_max'] = df[t_cols].max(axis=1)
        
    # Features específicas das colunas F
    f_perfil = [c for c in f_cols if c.startswith('F01') or c.startswith('F02')]
    if f_perfil: 
        df['F_perfil_mean'] = df[f_perfil].mean(axis=1)
        df['F_perfil_std'] = df[f_perfil].std(axis=1)

    f_sono = [c for c in f_cols if c.startswith('F07')]
    if f_sono: 
        df['F_sono_mean'] = df[f_sono].mean(axis=1)
        df['F_sono_std'] = df[f_sono].std(axis=1)
    
    f_final = [c for c in f_cols if c.startswith('F11')]
    if f_final: 
        df['F_final_mean'] = df[f_final].mean(axis=1)
        df['F_final_std'] = df[f_final].std(axis=1)

    df['F_mean_geral'] = df[f_cols].mean(axis=1)

    # Interações entre as top 3 features
    top3 = [f for f in FEATURES['target1'] if '_X_' not in f][:3]
    for i, f1 in enumerate(top3):
        for f2 in top3[i+1:]:
            df[f'{f1}_X_{f2}'] = df.get(f1, 0) * df.get(f2, 0)
    
    # Garante todas as features esperadas pelo modelo
    df_final = df.reindex(columns=FEATURES['target1'], fill_value=0)
    return SCALERS['target1'].transform(df_final)

def preprocess_target2(df_input):
    """Pré-processamento específico para Target 2 (ensemble)"""
    df = df_input.copy()
    
    if 'F0103' in df.columns: 
        df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')
    
    # Identificação de colunas
    p_cols = [c for c in df.columns if c.startswith('P') and any(char.isdigit() for char in c)]
    t_cols = [c for c in df.columns if c.startswith('T') and any(char.isdigit() for char in c)]
    f_cols = [c for c in df.columns if c.startswith('F') and len(c) > 1 and any(char.isdigit() for char in c)]

    # Processamento de colunas numéricas
    for col in p_cols + t_cols + f_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').replace(-1, np.nan)
            df[col].fillna(df[col].median(), inplace=True)
            
    # Features básicas de sono
    if 'QtdHorasDormi' in df.columns and 'Acordar' in df.columns:
        df['sono_total'] = df['QtdHorasDormi']
        df['acordar'] = df['Acordar']

    # Médias específicas
    f_sono = [c for c in f_cols if c.startswith('F07')]
    if f_sono: 
        df['F_sono_mean'] = df[f_sono].mean(axis=1)

    f_final = [c for c in f_cols if c.startswith('F11')]
    if f_final: 
        df['F_final_mean'] = df[f_final].mean(axis=1)

    if p_cols: 
        df['P_mean'] = df[p_cols].mean(axis=1)
    
    # Interação entre as duas principais features
    base_features = [f for f in FEATURES['target2'] if '_X_' not in f]
    if len(base_features) >= 2:
        f1, f2 = base_features[0], base_features[1]
        interaction_name = f'{f1}_X_{f2}'
        if interaction_name in FEATURES['target2']:
            df[interaction_name] = df[f1] * df[f2]

    # Garante todas as features esperadas pelo modelo
    df_final = df.reindex(columns=FEATURES['target2'], fill_value=0)
    return SCALERS['target2'].transform(df_final)

def preprocess_target3(df_input):
    """Pré-processamento específico para Target 3 (ensemble)"""
    df = df_input.copy()

    if 'F0103' in df.columns: 
        df['F0103'] = pd.to_numeric(df['F0103'].astype(str).str.replace(',', '.'), errors='coerce')

    # Identificação de colunas
    p_cols = [c for c in df.columns if c.startswith('P') and any(char.isdigit() for char in c)]
    t_cols = [c for c in df.columns if c.startswith('T') and any(char.isdigit() for char in c)]
    f_cols = [c for c in df.columns if c.startswith('F') and len(c) > 1 and any(char.isdigit() for char in c)]

    # Processamento de colunas numéricas
    for col in p_cols + t_cols + f_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce').replace(-1, np.nan)
            df[col].fillna(df[col].median(), inplace=True)
    
    # Estatísticas avançadas das colunas P
    if p_cols:
        df['P_mean'] = df[p_cols].mean(axis=1)
        df['P_std'] = df[p_cols].std(axis=1)
        df['P_late'] = df[['P09', 'P12', 'P13', 'P15']].mean(axis=1) if all(c in df.columns for c in ['P09', 'P12', 'P13', 'P15']) else 0
        df['P_early'] = df[['P01', 'P02', 'P03', 'P04']].mean(axis=1) if all(c in df.columns for c in ['P01', 'P02', 'P03', 'P04']) else 0

    # Estatísticas das colunas T
    if t_cols:
        df['T_mean'] = df[t_cols].mean(axis=1)
        df['T_std'] = df[t_cols].std(axis=1)

    # Features de sono avançadas
    if 'QtdHorasSono' in df.columns:
        f_sono = [c for c in f_cols if '07' in c]
        if f_sono:
            df['F_sono_mean'] = df[f_sono].mean(axis=1)
            df['F_sono_std'] = df[f_sono].std(axis=1)
            df['F_sono_max'] = df[f_sono].max(axis=1)
        if 'Acordar' in df.columns:
            df['sono_x_acordar'] = df['QtdHorasSono'] * df['Acordar']
            df['acordar_squared'] = df['Acordar'] ** 2
    
    # Features finais
    f_final = [c for c in f_cols if '11' in c]
    if f_final: 
        df['F_final_mean'] = df[f_final].mean(axis=1)

    # Interação específica para Target 3
    if 'F1103' in df.columns and 'P_mean' in df.columns and 'F1103_X_P_mean' in FEATURES['target3']:
        df['F1103_X_P_mean'] = df['F1103'] * df['P_mean']
    
    # Garante todas as features esperadas pelo modelo
    df_final = df.reindex(columns=FEATURES['target3'], fill_value=0)
    return SCALERS['target3'].transform(df_final)

# --- Rotas da API (ATUALIZADAS) ---
@app.get("/health", status_code=status.HTTP_200_OK)
def health_check():
    """Endpoint de health check para o Docker Compose."""
    if MODELS is None:
        raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Modelos de ML não carregados.")
    return {"status": "ok"}

@app.post("/register", status_code=status.HTTP_201_CREATED)
def register(user: schemas.UserCreate, db: Session = Depends(database.get_db)):
    db_user = crud.get_user_by_username(db, username=user.username)
    if db_user:
        raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail="Usuário já existe")
    try:
        crud.create_user(db=db, user_schema=user)
        return {"msg": "Usuário registrado com sucesso"}
    except IntegrityError: # Captura erro de corrida (race condition)
        db.rollback()
        raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail="Usuário já existe")

@app.post("/login", response_model=schemas.Token)
def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):
    user = crud.get_user_by_username(db, username=form_data.username)
    if not user or not auth.verify_password(form_data.password, user.password_hash):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Credenciais inválidas")
    access_token = auth.create_access_token(data={"sub": str(user.id)})
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/predict")
async def predict(file: UploadFile = File(...), user_id: str = Depends(auth.get_current_user_id), db: Session = Depends(database.get_db)):
    if MODELS is None:
        raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Modelos de ML não estão disponíveis.")
    
    try:
        contents = await file.read()
        buffer = BytesIO(contents)
        df_new = pd.read_excel(buffer)
        if 'Código de Acesso' not in df_new.columns:
            print("Coluna 'Código de Acesso' não encontrada no arquivo.")
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Coluna 'Código de Acesso' não encontrada no arquivo.")
    except Exception as e:
        print(f"Erro ao ler o arquivo Excel: {e}")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=f"Erro ao ler o arquivo Excel: {e}")

    df_results = df_new.copy()
    shap_data = {}

    try:
        # Previsão T1 (modelo único)
        X_scaled_t1 = preprocess_target1(df_new)
        df_results['Previsão T1'] = MODELS['target1'].predict(X_scaled_t1).round(2)
        
        # Previsão T2 (ensemble - média dos 3 modelos)
        X_scaled_t2 = preprocess_target2(df_new)
        preds_t2 = [model.predict(X_scaled_t2) for model in MODELS['target2']]
        df_results['Previsão T2'] = np.mean(preds_t2, axis=0).round(2)
        
        # Previsão T3 (ensemble - média dos 3 modelos)
        X_scaled_t3 = preprocess_target3(df_new)
        preds_t3 = [model.predict(X_scaled_t3) for model in MODELS['target3']]
        df_results['Previsão T3'] = np.mean(preds_t3, axis=0).round(2)

        # Cálculo SHAP - ATUALIZADO PARA ENSEMBLE
        # T1 (modelo único)
        shap_values_t1 = EXPLAINERS['target1'].shap_values(X_scaled_t1)
        
        # T2 (média dos SHAP values dos 3 modelos do ensemble)
        shap_values_list_t2 = [explainer.shap_values(X_scaled_t2) for explainer in EXPLAINERS['target2']]
        shap_values_t2 = np.mean(shap_values_list_t2, axis=0)

        # T3 (média dos SHAP values dos 3 modelos do ensemble)
        shap_values_list_t3 = [explainer.shap_values(X_scaled_t3) for explainer in EXPLAINERS['target3']]
        shap_values_t3 = np.mean(shap_values_list_t3, axis=0)

        # Estrutura dos dados SHAP para resposta
        for i, j_id in enumerate(df_results['Código de Acesso']):
            shap_data[str(j_id)] = {
                'T1': {
                    'shap_values': shap_values_t1[i].tolist(), 
                    'feature_names': FEATURES['target1']
                },
                'T2': {
                    'shap_values': shap_values_t2[i].tolist(), 
                    'feature_names': FEATURES['target2']
                },
                'T3': {
                    'shap_values': shap_values_t3[i].tolist(), 
                    'feature_names': FEATURES['target3']
                }
            }
            
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Erro durante o pipeline de previsão: {e}")

    # Salvar no DB
    try:
        for _, row in df_results.iterrows():
            db.add(models.Prediction(
                user_id=int(user_id), 
                jogador_id=str(row['Código de Acesso']), 
                pred_t1=row['Previsão T1'], 
                pred_t2=row['Previsão T2'], 
                pred_t3=row['Previsão T3']
            ))
        db.commit()
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Erro ao salvar previsão no banco de dados: {e}")

    return {
        "predictions": df_results[['Código de Acesso', 'Previsão T1', 'Previsão T2', 'Previsão T3']].to_dict('records'),
        "shap_data": shap_data
    }

@app.get("/history")
def get_history(user_id: str = Depends(auth.get_current_user_id), db: Session = Depends(database.get_db)):
    query = db.query(
        models.Prediction.upload_timestamp, 
        func.count(models.Prediction.id).label('num_jogadores')
    ).filter(models.Prediction.user_id == int(user_id)).group_by(models.Prediction.upload_timestamp).order_by(models.Prediction.upload_timestamp.desc()).all()
    return [{"timestamp": r.upload_timestamp.strftime("%Y-%m-%d %H:%M:%S"), "num_jogadores": r.num_jogadores} for r in query]

@app.get("/feature_importance")
def get_feature_importance(user_id: str = Depends(auth.get_current_user_id)):
    if MODELS is None:
        raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Modelos de ML não carregados.")
    
    importances_data = {}
    try:
        # Target 1 (modelo único)
        if hasattr(MODELS['target1'], 'feature_importances_'):
            df_imp_t1 = pd.DataFrame({
                'feature': FEATURES['target1'], 
                'importance': MODELS['target1'].feature_importances_
            }).sort_values(by='importance', ascending=False).head(20)
            importances_data['Target1'] = df_imp_t1.to_dict('records')
        else:
            importances_data['Target1'] = []

        # Targets 2 e 3 (média das importâncias dos ensembles)
        for target_key, target_name in [('target2', 'Target2'), ('target3', 'Target3')]:
            all_importances = []
            for model in MODELS[target_key]:
                if hasattr(model, 'feature_importances_'):
                    all_importances.append(model.feature_importances_)
            
            if all_importances:
                avg_importance = np.mean(all_importances, axis=0)
                df_imp = pd.DataFrame({
                    'feature': FEATURES[target_key],
                    'importance': avg_importance
                }).sort_values(by='importance', ascending=False).head(20)
                importances_data[target_name] = df_imp.to_dict('records')
            else:
                importances_data[target_name] = []
                
        return importances_data
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Erro ao calcular feature importance: {e}")
</file>

<file path="README.md">
# 📊 Documentação do projeto

**Propósito do Projeto**

<small>

Este projeto foi desenvolvido para realizar um ciclo completo de análise de dados, desde a limpeza e preparação até a modelagem preditiva e avaliação de performance. O objetivo principal é transformar um conjunto de dados brutos de jogadores em insights acionáveis e modelos de _machine learning_ robustos, capazes de prever três métricas-alvo distintas (`Target1`, `Target2` e `Target3`).

O processo é dividido em duas fases principais:

1.  **Fase de Limpeza e Preparação (V1)**: Focada em garantir a qualidade e a consistência dos dados. Nesta etapa, são aplicadas técnicas como tratamento de valores ausentes, remoção de _outliers_, _feature engineering_ e seleção de variáveis para criar um _dataset_ otimizado e confiável.

2.  **Fase de Modelagem (V2)**: Utiliza o _dataset_ limpo para treinar, avaliar e comparar diversos algoritmos de regressão, como _Random Forest_, _XGBoost_ e _LightGBM_. O objetivo é identificar os modelos com melhor desempenho para cada uma das variáveis-alvo, salvando-os para futura implementação em produção.

Ao final, o projeto entrega não apenas os modelos treinados, mas também análises visuais e relatórios que facilitam a interpretação dos resultados e a identificação das variáveis mais influentes.

</small>

<details>

<summary> 📊 Fase V1 - Limpeza</summary>

### 🧩 **Célula 1/2 - Configuração do Ambiente e Importações**

<small>
📖 Explicação:

Esta célula inicializa o ambiente de trabalho. Primeiro, realiza a instalação silenciosa das dependências externas necessárias para a manipulação de planilhas e para a aplicação de técnicas de aprendizado de máquina. Em seguida, importa as bibliotecas e módulos que serão utilizados ao longo das etapas de limpeza, transformação e análise de dados.

<details>

<summary> Bibliotecas utilizadas: </summary>

<small>

- **xlsxwriter e openpyxl**:

Dependências utilizadas pelo Pandas para ler e escrever arquivos no formato Excel (.xlsx). A instalação garante a compatibilidade com essas operações.

- **scikit-learn**:

Uma das principais bibliotecas de aprendizado de máquina em Python, que fornece ferramentas eficientes para pré-processamento, modelagem e avaliação de dados.

- **pandas**:

Fundamental para a manipulação e análise de dados. É utilizada para carregar os dados em estruturas conhecidas como DataFrames, que facilitam a limpeza e a transformação.

- **numpy**:

Essencial para computação numérica, oferece suporte a arrays e matrizes multidimensionais, além de uma vasta coleção de funções matemáticas de alto desempenho.

- **SimpleImputer**:

Uma classe do Scikit-learn usada para tratar dados ausentes (NaN), permitindo preenchê-los com uma estratégia definida (como a média, mediana ou a moda da coluna).

- **StandardScaler**:

Uma classe do Scikit-learn utilizada para padronizar as features numéricas, redimensionando-as para que tenham média zero e desvio padrão igual a um, o que é crucial para muitos algoritmos de machine learning.

- **datetime**:

Módulo padrão do Python para manipulação de datas e horas.

- **warnings**:

Módulo para controlar a exibição de mensagens de aviso. A linha warnings.filterwarnings('ignore') é usada para suprimir esses avisos e manter a saída do código mais limpa e focada nos resultados.
</small>

</details>

---

### 🧩 **Célula 3 - DEFINIÇÕES**

<details>

<summary> Trecho do codigo em Python </summary>

```python
COLUNAS_CATEGORICAS = [
    'Cor0202', 'Cor0204', 'Cor0206', 'Cor0208', 'Cor0209Outro',
    'P01', 'P02', 'P03', 'P04', 'P05', 'P07', 'P08', 'P09', 'P10',
    'P12', 'P13', 'P15', 'P12_1', 'P02_1', 'P03_1', 'P09_1'
]

COLUNAS_TARGETS = ['Target1', 'Target2', 'Target3']

COLUNAS_IGNORAR = [
    'Código de Acesso', 'Data/Hora Último',
    'L0210 (não likert)',
    'F0299 - Explicação Tempo', 'T0499 - Explicação Tempo',
    'PTempoTotalExpl', 'T1199Expl', 'T1205Expl', 'T1210Expl',
    'TempoTotalExpl'
]

print(f"📋 Categóricas: {len(COLUNAS_CATEGORICAS)} | Targets: {len(COLUNAS_TARGETS)}")
```

</details>
<small> 📖 Explicação:

Esta célula centraliza as **definições estruturais** do dataset, classificando as colunas em grupos conforme seu papel no processamento:

- **`COLUNAS_CATEGORICAS`**: lista de variáveis qualitativas ou de múltipla escolha, normalmente representadas por códigos (`P01`, `P02`, etc.).
- **`COLUNAS_TARGETS`**: define as variáveis-alvo (targets) utilizadas em análises ou modelagem.
- **`COLUNAS_IGNORAR`**: contém variáveis irrelevantes ou auxiliares, como identificadores, timestamps e campos descritivos.
  </small>

---

### 🧩 **Célula 4 - Carregando Dataset Recebido**

<details>

<summary> Trecho do codigo em Python </summary>

```python
import pandas as pd

df_original = pd.read_excel('JogadoresV1.xlsx')
df = df_original.copy()
print(f"Dados carregados: {df.shape[0]} linhas, {df.shape[1]} colunas")
```

</details>
<small>
📖 Explicação:

Nesta célula, realizamos a leitura do arquivo Excel contendo o dataset bruto e criamos uma cópia para preservar o original.

- `pd.read_excel()` carrega o arquivo no formato Excel.
- `.copy()` evita modificações acidentais no dataset original.  
  </small>

---

### 🧩 **Célula 5 - TRATAMENTO F0103**

<details>

<summary> Trecho do codigo em Python </summary>

```python
if 'F0103' in df.columns and df['F0103'].dtype == 'object':
    print("\n🔧 Convertendo F0103 (vírgula → ponto)")
    df['F0103'] = df['F0103'].str.replace(',', '.').astype(float)
    print("   ✅ Convertido!")
```

</details>

<small> 📖 Explicação:

Nesta célula, corrigimos a coluna chamada `F0103` para garantir que os números estejam em um formato que o Python consegue entender corretamente.

- Primeiro verificamos se a coluna `F0103` existe na tabela e se ela está como texto.

- Em seguida, substituímos todas as vírgulas `,` por pontos `.` — isso é importante porque em alguns arquivos, números decimais vêm escritos como `3,14` em vez de `3.14`.
- Por fim, transformamos essa coluna em números de ponto flutuante (`float`), para que possa ser usada em cálculos, análises e modelos sem causar erros.

Esse passo garante que a informação da coluna `F0103` seja precisa e utilizável em todas as etapas seguintes do processamento de dados.
</small>

---

### 🧩 **Célula 6 — REMOÇÃO DE NEGATIVOS**

<details>

<summary> Trecho do codigo em Python </summary>

```python
print("\n" + "=" * 80)
print("ETAPA 1: REMOÇÃO DE NEGATIVOS → NaN")
print("=" * 80)

colunas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
colunas_numericas = [col for col in colunas_numericas if col not in COLUNAS_TARGETS]

contador = 0
for col in colunas_numericas:
    negativos = (df[col] < 0).sum()
    if negativos > 0:
        df.loc[df[col] < 0, col] = np.nan
        contador += negativos

print(f"✅ {contador} negativos convertidos → NaN")

```

</details>

<small> 📖 Explicação:

Nesta célula, identificamos todas as colunas numéricas e substituímos valores negativos por valores vazios (NaN).

- Primeiro, usamos `df.select_dtypes(include=[np.number])` para selecionar todas as colunas que contêm números.

- Em seguida, removemos da lista as colunas-alvo definidas em `COLUNAS_TARGETS`, pois essas não devem ser modificadas nesse passo.

- Para cada coluna numérica restante, verificamos quantos valores são negativos usando `(df[col] < 0).sum()`.

- Quando valores negativos são encontrados, usamos `df.loc[df[col] < 0, col] = np.nan` para substituí-los.

- Ao final, imprimimos a quantidade total de valores negativos convertidos.

</small>

---

### 🧩 **Célula 7 - Remoção de Colunas com Muito Missing**

<details>

<summary> Trecho do codigo em Python </summary>

```python
print("\n" + "=" * 80)
print("ETAPA 2: ANÁLISE DE MISSING")
print("=" * 80)

missing_info = pd.DataFrame({
    'Coluna': df.columns,
    'Missing': df.isna().sum(),
    'Percentual': (df.isna().sum() / len(df) * 100).round(2)
})
missing_info = missing_info[missing_info['Missing'] > 0].sort_values('Percentual', ascending=False)

threshold = 70
colunas_remover = missing_info[missing_info['Percentual'] > threshold]['Coluna'].tolist()

if colunas_remover:
    print(f"🗑️  Removendo {len(colunas_remover)} colunas (>{threshold}% missing)")
    df = df.drop(columns=colunas_remover)

print(f"✅ Shape: {df.shape}")

```

</details>

<small> 📖 Explicação:

Nesta célula, realizamos uma análise de dados faltantes (`missing values`) em cada coluna e removemos aquelas que possuem um percentual alto de ausência de dados.

- Usamos `df.isna().sum()` para contar quantos valores estão faltando em cada coluna.

- Calculamos o percentual de valores faltantes dividindo pela quantidade total de linhas (`len(df)`).

- Criamos o DataFrame `missing_info`, que contém o nome da coluna, quantidade de valores ausentes e percentual de ausência.

- Ordenamos `missing_info` pelo percentual de ausência em ordem decrescente para focar nas colunas com mais dados faltantes.

- Definimos um limite (`threshold`) de 70%. Isso significa que qualquer coluna com mais de 70% de valores faltantes será removida.

- Usamos `df.drop(columns=colunas_remover)` para eliminar essas colunas do dataset.

- Por fim, imprimimos quantas colunas foram removidas e o novo formato da tabela (`df.shape`).

</small>

---

### 🧩 **Célula 8 - Remoção de Jogadores sem Targets**

<details>

<summary> Trecho do codigo em Python </summary>

```python
print("\n" + "=" * 80)
print("ETAPA 3: REMOÇÃO DE JOGADORES SEM TARGETS")
print("=" * 80)

antes = len(df)
df = df.dropna(subset=COLUNAS_TARGETS, how='all')
depois = len(df)

print(f"✅ Jogadores mantidos: {depois} (removidos: {antes-depois})")

```

</details>

<small> 📖 Explicação:

Nesta célula, garantimos que todos os registros (linhas) do dataset contenham pelo menos uma informação nos campos-alvo definidos em `COLUNAS_TARGETS`.

- Usamos `len(df)` para contar quantas linhas existem antes da limpeza (antes).

- O comando `df.dropna(subset=COLUNAS_TARGETS, how='all')` remove todas as linhas em que todos os campos de target estejam vazios (`NaN`).

- Calculamos novamente o tamanho do dataset (`depois`) para saber quantos registros restaram.

- Imprimimos a quantidade de jogadores mantidos e removidos após o filtro.

</small>

---

### **🧩 Célula 9 - Imputação de Valores Faltantes**

<details>

<summary> Trecho do codigo em Python </summary>

```python
# Numéricas: MEDIANA
colunas_num_imputar = [
    col for col in df.select_dtypes(include=[np.number]).columns
    if col not in COLUNAS_TARGETS and col not in COLUNAS_IGNORAR
]

if colunas_num_imputar:
    imputer_num = SimpleImputer(strategy='median')
    df[colunas_num_imputar] = imputer_num.fit_transform(df[colunas_num_imputar])
    print(f"✅ {len(colunas_num_imputar)} numéricas imputadas (mediana)")

# Categóricas: MODA
colunas_cat_imputar = [col for col in COLUNAS_CATEGORICAS if col in df.columns]

if colunas_cat_imputar:
    imputer_cat = SimpleImputer(strategy='most_frequent')
    df[colunas_cat_imputar] = imputer_cat.fit_transform(df[colunas_cat_imputar])
    print(f"✅ {len(colunas_cat_imputar)} categóricas imputadas (moda)")


```

</details>

<small> 📖 Explicação:

Nesta célula, tratamos os valores faltantes no dataset usando imputação — ou seja, substituímos valores ausentes (`NaN`) por valores calculados com base nos dados disponíveis.

- Colunas numéricas:

  - Identificamos todas as colunas numéricas usando `df.select_dtypes(include=[np.number])`.

  - Removemos as colunas-alvo (`COLUNAS_TARGETS`) e as colunas marcadas para ignorar (`COLUNAS_IGNORAR`).

  - Criamos um imputador (`SimpleImputer`) usando a estratégia `median` para substituir valores ausentes pela mediana daquela coluna.

  - Aplicamos a imputação usando `fit_transform`.

- Colunas categóricas:

  - Identificamos as colunas categóricas presentes (`COLUNAS_CATEGORICAS`).

  - Criamos um imputador usando a estratégia `most_frequent` para substituir valores ausentes pelo valor mais frequente da coluna (moda).

  - Aplicamos a imputação usando fit_transform.

</small>

---

### **🧩 Célula 10 - Tratamento de Outliers (IQR + Mediana)**

<details>

<summary> Trecho do codigo em Python </summary>

```python
colunas_outliers = [
    col for col in colunas_num_imputar
    if col not in ['QtdHorasSono', 'QtdHorasDormi', 'Acordar']
]

outliers_tratados = 0
for col in colunas_outliers:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1

    limite_inf = Q1 - 1.5 * IQR
    limite_sup = Q3 + 1.5 * IQR

    outliers_mask = (df[col] < limite_inf) | (df[col] > limite_sup)
    n_outliers = outliers_mask.sum()

    if n_outliers > 0:
        mediana = df[col].median()
        df.loc[outliers_mask, col] = mediana
        outliers_tratados += n_outliers

print(f"✅ {outliers_tratados} outliers tratados (substituídos por mediana)")

```

</details>

<small> 📖 Explicação:

Nesta célula, detectamos e tratamos outliers — valores extremos que podem distorcer análises e modelos — utilizando o método do Intervalo Interquartílico (IQR) e substituindo-os pela mediana da coluna.

- Primeiro identificamos as colunas numéricas a serem tratadas (`colunas_outliers`), excluindo colunas específicas como `QtdHorasSono`, `QtdHorasDormi` e `Acordar`.

- Para cada coluna:

  - Calculamos o **primeiro quartil** (`Q1`) e o **terceiro quartil** (`Q3`).

  - Determinamos o **Intervalo Interquartílico (IQR)** como `Q3 - Q1`.

  - Definimos limites inferior (`limite_inf`) e superior (`limite_sup`) como `Q1 - 1.5*IQR` e `Q3 + 1.5*IQR`, respectivamente.

  - Criamos uma máscara (`outliers_mask`) identificando valores fora desses limites.

  - Quando outliers são encontrados, substituímos esses valores pela mediana da coluna.

  - Contabilizamos quantos outliers foram tratados.

</small>

---

### **🧩 Célula 11 - One-Hot Encoding**

<details>

<summary> Trecho do codigo em Python </summary>

```python
colunas_cat_presentes = [col for col in COLUNAS_CATEGORICAS if col in df.columns]

if colunas_cat_presentes:
    colunas_antes = df.shape[1]
    df = pd.get_dummies(df, columns=colunas_cat_presentes, prefix=colunas_cat_presentes, drop_first=False)
    colunas_depois = df.shape[1]

    print(f"✅ One-Hot concluído: {colunas_antes} → {colunas_depois} colunas")

```

</details>

<small> 📖 Explicação:

Nesta célula, aplicamos a técnica de One-Hot Encoding, que transforma colunas categóricas em variáveis numéricas binárias, permitindo que algoritmos de machine learning trabalhem com esses dados.

- Identificamos as colunas categóricas presentes no dataset (`colunas_cat_presentes`) comparando `COLUNAS_CATEGORICAS` com as colunas reais do `df`.

- Guardamos o número inicial de colunas (`colunas_antes`).

- Usamos `pd.get_dummies()` para criar colunas binárias para cada categoria, mantendo o prefixo original para identificação.

- Não usamos `drop_first=True` para preservar todas as categorias.

- Calculamos o número final de colunas (`colunas_depois`) após a transformação.

- Imprimimos quantas colunas foram adicionadas no processo.

</small>

---

### **🧩 Célula 12 - Feature Engineering (Agregações)**

<details>

<summary> Trecho do codigo em Python </summary>

```python
# Agregação F11*
f11_cols = [c for c in df.columns if c.startswith('F11') and pd.api.types.is_numeric_dtype(df[c])]
if len(f11_cols) > 2:
    df['F11_mean'] = df[f11_cols].mean(axis=1)
    print(f"✅ F11_mean criada ({len(f11_cols)} colunas)")

# Agregação F07*
f07_cols = [c for c in df.columns if c.startswith('F07') and pd.api.types.is_numeric_dtype(df[c])]
if len(f07_cols) > 2:
    df['F07_mean'] = df[f07_cols].mean(axis=1)
    print(f"✅ F07_mean criada ({len(f07_cols)} colunas)")
```

</details>

<small> 📖 Explicação:

Nesta célula, realizamos Feature Engineering, criando novas colunas que representam agregações de variáveis relacionadas, para facilitar a análise e potencialmente melhorar a performance de modelos.

- **Agregação F11**:

  - Identificamos colunas cujo nome começa com "`F11`" e que são numéricas.

  - Se existirem mais de duas colunas nesse grupo, calculamos a média delas linha a linha (`mean(axis=1)`), criando a nova coluna `F11_mean`.

  - Exibimos quantas colunas foram utilizadas para essa agregação.

- **Agregação F07**:

  - De forma semelhante, identificamos colunas que começam com "`F07`" e que são numéricas.

  - Se houver mais de duas, calculamos a média e criamos `F07_mean`.

  - Exibimos quantas colunas contribuíram para essa agregação.

</small>

---

### **🧩 Célula 13 - 🔧 Correção 1 - Converter BOOL → INT**

<details>

<summary> Trecho do codigo em Python </summary>

```python
bool_cols = df.select_dtypes(include=['bool']).columns.tolist()

if bool_cols:
    print(f"📋 Convertendo {len(bool_cols)} colunas booleanas...")
    df[bool_cols] = df[bool_cols].astype(int)
    print(f"✅ VERDADEIRO/FALSO → 1/0")
    print(f"   Exemplo: {bool_cols[:3]}")
else:
    print("ℹ️  Nenhuma coluna booleana encontrada")
```

</details>

<small> 📖 Explicação:

Nesta célula, corrigimos o formato das colunas booleanas do dataset, transformando valores `True`/`False` em `1/0`. Isso é necessário porque muitos algoritmos de machine learning requerem que todos os dados sejam numéricos.

- Usamos `df.select_dtypes(include=['bool'])` para identificar todas as colunas que contêm valores booleanos (`True` ou `False`).

- Se houver colunas booleanas (`bool_cols`), exibimos quantas serão convertidas.

- Aplicamos `.astype(int)` para transformar os valores em números inteiros (`1` para `True`, `0` para `False`).

- Exibimos alguns exemplos de colunas convertidas para confirmar a ação.

- Caso não existam colunas booleanas, uma mensagem informativa é exibida.

</small>

---

### **🧩 Célula 14 - Feature Selection por Correlação**

<details>

<summary> Trecho do codigo em Python </summary>

```python
print("\n" + "=" * 80)
print("ETAPA 8: FEATURE SELECTION")
print("=" * 80)

features_numericas_finais = [
    col for col in df.columns
    if col not in COLUNAS_TARGETS
    and col not in COLUNAS_IGNORAR
    and pd.api.types.is_numeric_dtype(df[col])
]

print(f"📊 Features disponíveis: {len(features_numericas_finais)}")

corr_t1 = df[features_numericas_finais].corrwith(df['Target1']).abs()
corr_t2 = df[features_numericas_finais].corrwith(df['Target2']).abs()
corr_t3 = df[features_numericas_finais].corrwith(df['Target3']).abs()

corr_mean = (corr_t1 + corr_t2 + corr_t3) / 3

threshold = 0.20
features_selecionadas = corr_mean[corr_mean > threshold].index.tolist()

print(f"✅ Features mantidas: {len(features_selecionadas)} (threshold={threshold})")
print(f"✅ Features removidas: {len(features_numericas_finais) - len(features_selecionadas)}")

# Top 10
print(f"\n🏆 TOP 10 FEATURES:")
top10 = corr_mean.sort_values(ascending=False).head(10)
for idx, (feat, corr) in enumerate(top10.items(), 1):
    print(f"   {idx:2d}. {feat:30s} | Corr: {corr:.4f}")
```

</details>

<small> 📖 Explicação:

Nesta célula, realizamos a **seleção de features** com base na correlação entre variáveis numéricas e os targets (`Target1`, `Target2`, `Target3`). O objetivo é manter apenas as colunas que têm relevância estatística para o modelo.

- Definimos `features_numericas_finais` como todas as colunas numéricas que não são targets nem estão na lista `COLUNAS_IGNORAR`.

- Calculamos a correlação absoluta (`.abs()`) entre cada feature e cada target (`corr_t1`, `corr_t2`, `corr_t3`).

- Obtemos a média das correlações (`corr_mean`) para avaliar a importância geral da feature em relação a todos os targets.

- Definimos um **threshold** (limite) de 0.20; apenas features com correlação média acima desse valor são mantidas (`features_selecionadas`).

- Informamos quantas features foram mantidas e quantas removidas.

- Exibimos as **Top 10 features** com maior correlação média, ordenadas do maior para o menor valor, para referência.

</small>

---

### **🧩 Célula 15 - Criar DataFrames Finais**

<details>

<summary> Trecho do codigo em Python </summary>

```python
df_final_nao_normalizado = df[features_selecionadas + COLUNAS_TARGETS].copy()
print(f"✅ DataFrame NÃO-NORMALIZADO: {df_final_nao_normalizado.shape}")

df_final_normalizado = df_final_nao_normalizado.copy()

# Identificar categóricas (One-Hot) para NÃO normalizar
features_cat_onehot = [
    col for col in features_selecionadas
    if any(cat in col for cat in COLUNAS_CATEGORICAS)
]

features_numericas_normalizar = [
    col for col in features_selecionadas
    if col not in features_cat_onehot
]

print(f"🔢 Numéricas a normalizar: {len(features_numericas_normalizar)}")
print(f"📝 Categóricas (preservadas): {len(features_cat_onehot)}")

if features_numericas_normalizar:
    scaler = StandardScaler()
    df_final_normalizado[features_numericas_normalizar] = scaler.fit_transform(
        df_final_normalizado[features_numericas_normalizar]
    )
    print(f"✅ Normalização concluída!")

print(f"✅ DataFrame NORMALIZADO: {df_final_normalizado.shape}")
```

</details>

<small> 📖 Explicação:

Nesta célula, preparamos os **DataFrames finais** para análise e modelagem, criando versões normalizadas e não-normalizadas.

- Criamos `df_final_nao_normalizado` contendo apenas as **features selecionadas** e os **targets**, preservando o formato original.

- Criamos uma cópia chamada `df_final_normalizado` para aplicar normalização sem alterar o original.

- Identificamos colunas categóricas geradas pelo **One-Hot Encoding** (`features_cat_onehot`) para garantir que elas não sejam normalizadas.

- Definimos `features_numericas_normalizar` como todas as features numéricas restantes.

- Informamos quantas features numéricas serão normalizadas e quantas categóricas serão preservadas.

- Aplicamos o `StandardScaler` às features numéricas, padronizando-as para média zero e desvio padrão igual a um.

- Exibimos o tamanho final de cada DataFrame, garantindo que ambos estejam prontos para uso posterior.

</small>

---

### **🧩 Célula 16 - Exportar para Excel**

<details>

<summary> Trecho do codigo em Python </summary>

```python
output_file = 'Dados_Otimizados_V4.xlsx'

writer = pd.ExcelWriter(output_file, engine='xlsxwriter')
workbook = writer.book

header_format = workbook.add_format({
    'bold': True, 'text_wrap': True, 'valign': 'vcenter',
    'align': 'center', 'fg_color': '#1F4E78',
    'font_color': 'white', 'border': 1
})

title_format = workbook.add_format({
    'bold': True, 'font_size': 16,
    'fg_color': '#4472C4', 'font_color': 'white',
    'align': 'center', 'valign': 'vcenter', 'border': 2
})

# Aba 1: Dados não-normalizados
df_final_nao_normalizado.to_excel(writer, sheet_name='Dados_Para_Analise', index=False, startrow=2)
worksheet1 = writer.sheets['Dados_Para_Analise']
worksheet1.merge_range('A1:Z1', '📋 DADOS LIMPOS - Versão Otimizada', title_format)
worksheet1.freeze_panes(3, 0)

# Aba 2: Dados normalizados
df_final_normalizado.to_excel(writer, sheet_name='Dados_Para_Modelo', index=False, startrow=2)
worksheet2 = writer.sheets['Dados_Para_Modelo']
worksheet2.merge_range('A1:Z1', '📊 DADOS NORMALIZADOS - Para ML', title_format)
worksheet2.freeze_panes(3, 0)

# Aba 3: Resumo estatístico
summary = df_final_nao_normalizado[COLUNAS_TARGETS].describe().T
summary.to_excel(writer, sheet_name='Resumo_Estatistico', startrow=2)
worksheet3 = writer.sheets['Resumo_Estatistico']
worksheet3.merge_range('A1:I1', '📊 RESUMO ESTATÍSTICO', title_format)

# Aba 4: Correlações
correlations_df = pd.DataFrame({
    'Feature': corr_mean.index,
    'Corr_Target1': corr_t1.values,
    'Corr_Target2': corr_t2.values,
    'Corr_Target3': corr_t3.values,
    'Corr_Media': corr_mean.values,
    'Mantida': ['✅' if f in features_selecionadas else '❌' for f in corr_mean.index]
}).sort_values('Corr_Media', ascending=False)

correlations_df.to_excel(writer, sheet_name='Correlacoes', index=False, startrow=2)
worksheet4 = writer.sheets['Correlacoes']
worksheet4.merge_range('A1:F1', '🔍 ANÁLISE DE CORRELAÇÕES', title_format)

writer.close()

print(f"✅ Arquivo '{output_file}' criado!")
```

</details>

<small> 📖 Explicação:

Nesta célula, exportamos os resultados finais para um arquivo Excel estruturado, criando múltiplas abas para facilitar a análise e utilização dos dados.

- Definimos o nome do arquivo de saída como `Dados_Otimizados_V4.xlsx`.

- Criamos um escritor Excel (`pd.ExcelWriter`) usando o engine `xlsxwriter`.

- Definimos formatações personalizadas para cabeçalhos (`header_format`) e títulos (`title_format`) para melhor visualização.

**Aba 1 – Dados não-normalizados:**

- Exporta `df_final_nao_normalizado`.

- Inclui um título e congela a visualização para facilitar navegação.

**Aba 2 – Dados normalizados:**

- Exporta `df_final_normalizado`.

- Inclui título e congelamento de linhas.

**Aba 3 – Resumo estatístico:**

- Cria resumo com estatísticas descritivas dos targets (`describe().T`).

**Aba 4 – Correlações:**

- Exporta tabela contendo correlações médias entre features e targets.

- Indica quais features foram mantidas na seleção.

- Fecha o arquivo Excel (`writer.close()`) e confirma a criação.

Essa celula entrega um arquivo organizado e documentado, pronto para análise e uso em modelos de machine learning.

</small>

---

### ✅ **Resumo Geral da Etapa de Limpeza**

Após a execução de todas as células, o dataset estará pronto para ser utilizado nas próximas fases do projeto, com:

- Códigos inválidos convertidos em `NaN`.
- Colunas pouco informativas removidas.
- Targets completos e consistentes.
- Estrutura final reduzida, porém mais confiável e analisável.

---

</details>

<details>

<summary> 📊 Fase V2 - Modelagem </summary>

### **🧩 Célula 1 - Instalação de Bibliotecas**

<details>

<summary> Trecho do codigo em Python </summary>

```python
!pip install xgboost lightgbm catboost scikit-learn pandas matplotlib seaborn plotly -q
print("✅ Bibliotecas instaladas com sucesso!")
```

</details>

<small> 📖 Explicação:

Esta célula instala todas as bibliotecas necessárias para rodar o projeto de modelagem avançada e visualizações.

O comando `!pip install` funciona dentro de notebooks Jupyter ou Google Colab e serve para instalar pacotes Python diretamente no ambiente.  
Aqui, estamos instalando:

- **xgboost, lightgbm, catboost** → algoritmos de aprendizado de máquina muito eficientes para regressão e classificação.
- **scikit-learn** → biblioteca com ferramentas para pré-processamento, modelagem e avaliação de dados.
- **pandas** → manipulação e análise de dados em tabelas.
- **matplotlib, seaborn** → geração de gráficos e visualizações.
- **plotly** → criação de gráficos interativos.

</small>

---

### **🧩 Célula 2 - Importação de Bibliotecas**

<details>

<summary> Trecho do codigo em Python </summary>

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import xgboost as xgb
import lightgbm as lgb
from catboost import CatBoostRegressor
import pickle

warnings.filterwarnings('ignore')
sns.set_style('whitegrid')

print("\n" + "=" * 80)
print("     FASE 3 COMPLETA: MODELAGEM AVANÇADA + VISUALIZAÇÕES")
print("=" * 80)

```

</details>

<small> 📖 Explicação:

Nesta célula, carregamos todas as bibliotecas necessárias para manipulação, análise, modelagem e visualização dos dados.

- **pandas** e **numpy**: manipulação e cálculo de dados.
- **matplotlib.pyplot** e **seaborn**: criação de gráficos estáticos.
- **warnings**: para suprimir mensagens de aviso indesejadas.
- **sklearn.model_selection**: funções para divisão dos dados e validação cruzada.
- **sklearn.linear_model**: modelos de regressão Linear e Ridge.
- **sklearn.ensemble**: algoritmos ensemble como Random Forest e Gradient Boosting.
- **sklearn.metrics**: cálculo de métricas de avaliação como RMSE e R².
- **xgboost, lightgbm, catboost**: algoritmos de machine learning de alta performance.
- **pickle**: salvar e carregar modelos treinados.

As últimas linhas configuram o estilo dos gráficos (`sns.set_style('whitegrid')`) e imprimem um título indicando o início da fase 3.

</small>

---

### **🧩 Célula 3 - Carregamento dos Dados**

<details>

<summary> Trecho do codigo em Python </summary>

```python
df = pd.read_excel('Dados_para_modelo.xlsx')

print(f"✅ Dados carregados com sucesso. Shape: {df.shape}")
print(f"   Total de Jogadores: {len(df)}")
print(f"   Total de Colunas: {len(df.columns)}")

```

</details>

<small> 📖 Explicação:

Esta célula carrega os dados de um arquivo Excel chamado `'Dados_para_modelo.xlsx'` usando a biblioteca **pandas** e armazena em um DataFrame chamado `df`.

O DataFrame é uma estrutura de dados semelhante a uma tabela, muito utilizada em análise de dados.

- `df.shape` retorna uma tupla (número de linhas, número de colunas) para verificar o tamanho do dataset.
- `len(df)` retorna o número total de linhas, representando a quantidade de jogadores.
- `len(df.columns)` retorna o número total de colunas, representando as variáveis disponíveis.

Essas impressões garantem que os dados foram carregados corretamente antes de prosseguir.

</small>

---

### **🧩 Célula 4 - Separação de Features (X) e Targets (y)**

<details>

<summary> Trecho do codigo em Python </summary>

```python
targets = ['Target1', 'Target2', 'Target3']
X = df.drop(columns=targets)
y1 = df['Target1']
y2 = df['Target2']
y3 = df['Target3']

print(f"✅ Features (X) separadas. Total de features: {X.shape[1]}")
print(f"✅ Targets (y1, y2, y3) separados.")
```

</details>

<small> 📖 Explicação:

Nesta célula, o dataset é separado em duas partes principais:

- **Features (X)**: as variáveis de entrada que serão usadas para prever algo.
- **Targets (y)**: as variáveis que queremos prever.

No código:

- `targets` é uma lista com os nomes das colunas alvo (`Target1`, `Target2`, `Target3`).
- `X` contém todas as colunas exceto as targets, obtido com `df.drop(columns=targets)`.
- `y1`, `y2` e `y3` contêm cada uma das targets separadamente.

</small>

---

### **🧩 Célula 5 - Divisão em Dados de Treino e Teste (80/20)**

<details>

<summary> Trecho do codigo em Python </summary>

```python
X_train, X_test, y1_train, y1_test = train_test_split(X, y1, test_size=0.2, random_state=42)
_, _, y2_train, y2_test = train_test_split(X, y2, test_size=0.2, random_state=42)
_, _, y3_train, y3_test = train_test_split(X, y3, test_size=0.2, random_state=42)

print(f"✅ Dados divididos em 80% treino e 20% teste.")
print(f"   Tamanho do treino: {len(X_train)} jogadores")
print(f"   Tamanho do teste:  {len(X_test)} jogadores")
```

</details>

<small> 📖 Explicação:

Esta célula divide os dados em conjuntos de treino e teste usando a função `train_test_split` do **scikit-learn**.

- `test_size=0.2` significa que 20% dos dados serão usados para teste e 80% para treino.
- `random_state=42` garante que a divisão seja reproduzível (sempre igual).

Para cada target (`y1`, `y2`, `y3`), são criados conjuntos separados:

- `X_train`, `X_test`: dados de entrada para treino e teste.
- `y1_train`, `y1_test`, etc.: valores alvo correspondentes.

</small>

---

### **🧩 Célula 6 - Definição dos Modelos a Serem Testados**

<details>

<summary> Trecho do codigo em Python </summary>

```python
modelos = {
    'Linear Regression': LinearRegression(),
    'Ridge': Ridge(alpha=1.0),
    'Random Forest': RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42, n_jobs=-1),
    'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, max_depth=5, random_state=42),
    'XGBoost': xgb.XGBRegressor(n_estimators=100, max_depth=6, learning_rate=0.1, random_state=42, n_jobs=-1),
    'LightGBM': lgb.LGBMRegressor(n_estimators=100, max_depth=6, learning_rate=0.1, random_state=42, n_jobs=-1, verbose=-1),
    'CatBoost': CatBoostRegressor(iterations=100, depth=6, learning_rate=0.1, random_state=42, verbose=False)
}
print(f"✅ {len(modelos)} modelos definidos para teste.")
```

</details>

<small> 📖 Explicação:

Nesta célula definimos um dicionário chamado `modelos` contendo vários algoritmos de machine learning para serem testados no projeto.

Cada chave é o nome do modelo e cada valor é uma instância do modelo com parâmetros definidos:

- **Linear Regression** e **Ridge**: modelos lineares básicos.
- **Random Forest**: modelo ensemble baseado em árvores, com parâmetros como `n_estimators` (número de árvores) e `max_depth` (profundidade máxima).
- **Gradient Boosting**: modelo ensemble que ajusta sequencialmente as árvores para reduzir erros.
- **XGBoost, LightGBM, CatBoost**: algoritmos avançados e muito eficientes para regressão, com parâmetros como `learning_rate`, `max_depth` e número de iterações (`n_estimators` ou `iterations`).

</small>

---

### **🧩 Célula 7 - Função de Treinamento e Avaliação**

<details>

<summary> Trecho do codigo em Python </summary>

```python
def treinar_avaliar_modelo(modelo, X_train, X_test, y_train, y_test):
    """Função para treinar, prever e avaliar um modelo, retornando as métricas e o modelo treinado."""
    modelo.fit(X_train, y_train)
    y_pred = modelo.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    mae = mean_absolute_error(y_test, y_pred)
    return {'modelo': modelo, 'y_pred': y_pred, 'r2': r2, 'rmse': rmse, 'mae': mae}

```

</details>

<small> 📖 Explicação:

Esta célula define uma função chamada `treinar_avaliar_modelo` que serve para treinar um modelo de machine learning e avaliar seu desempenho.

Parâmetros da função:

- `modelo`: objeto do modelo a ser treinado.
- `X_train`, `X_test`: dados de entrada para treino e teste.
- `y_train`, `y_test`: valores alvo para treino e teste.

O processo realizado dentro da função:

1. `modelo.fit(X_train, y_train)` → treina o modelo com os dados de treino.
2. `modelo.predict(X_test)` → faz previsões com os dados de teste.
3. Calcula métricas de avaliação:
   - **R² (r2_score)**: mede a qualidade da previsão (quanto mais próximo de 1, melhor).
   - **RMSE (root mean squared error)**: erro médio quadrático.
   - **MAE (mean absolute error)**: erro absoluto médio.

A função retorna um dicionário com o modelo treinado, previsões e métricas calculadas.

</small>

---

### **🧩 Célula 8 - Treinamento e Avaliação de Todos os Modelos**

<details>

<summary> Trecho do codigo em Python </summary>

```python
print("\n" + "=" * 80)
print("ETAPA 5: TREINAMENTO E AVALIAÇÃO DOS MODELOS")
print("=" * 80)

# --- Target 1 ---
resultados_t1 = {}
for nome, modelo in modelos.items():
    resultados_t1[nome] = treinar_avaliar_modelo(type(modelo)(**modelo.get_params()), X_train, X_test, y1_train, y1_test)
melhor_t1 = max(resultados_t1.items(), key=lambda x: x[1]['r2'])
print(f"🎯 Target 1 | Melhor Modelo: {melhor_t1[0]:<20} | R² = {melhor_t1[1]['r2']:.4f}")

# --- Target 2 ---
resultados_t2 = {}
for nome, modelo in modelos.items():
    resultados_t2[nome] = treinar_avaliar_modelo(type(modelo)(**modelo.get_params()), X_train, X_test, y2_train, y2_test)
melhor_t2 = max(resultados_t2.items(), key=lambda x: x[1]['r2'])
print(f"🎯 Target 2 | Melhor Modelo: {melhor_t2[0]:<20} | R² = {melhor_t2[1]['r2']:.4f}")

# --- Target 3 ---
resultados_t3 = {}
for nome, modelo in modelos.items():
    resultados_t3[nome] = treinar_avaliar_modelo(type(modelo)(**modelo.get_params()), X_train, X_test, y3_train, y3_test)
melhor_t3 = max(resultados_t3.items(), key=lambda x: x[1]['r2'])
print(f"🎯 Target 3 | Melhor Modelo: {melhor_t3[0]:<20} | R² = {melhor_t3[1]['r2']:.4f}")
```

</details>

<small> 📖 Explicação:

Esta célula realiza o treinamento e avaliação de todos os modelos definidos para cada target (Target1, Target2, Target3).

O processo é feito em três blocos:

1. Para cada target, criamos um dicionário (`resultados_t1`, `resultados_t2`, `resultados_t3`) para armazenar os resultados.
2. Usamos um loop `for` para percorrer cada modelo definido no dicionário `modelos`.
   - `type(modelo)(**modelo.get_params())` cria uma nova instância do modelo com os mesmos parâmetros.
   - Chamamos a função `treinar_avaliar_modelo` para treinar e avaliar o modelo.
3. Usamos `max(..., key=lambda x: x[1]['r2'])` para selecionar o modelo com melhor R² para cada target.

Ao final, imprimimos o nome do melhor modelo e seu R² para cada target.  
Isso ajuda a identificar qual modelo performou melhor para cada variável alvo.

</small>

---

### **🧩 Célula 9 - Visualização 1: Previsto vs. Real (Gráfico de Dispersão)**

<details>

<summary> Trecho do codigo em Python </summary>

```python
fig, axes = plt.subplots(1, 3, figsize=(18, 5))
fig.suptitle('Análise de Previsão vs. Valor Real para os Melhores Modelos', fontsize=16, fontweight='bold')

# Gráfico para Target 1
y1_pred = melhor_t1[1]['y_pred']
axes[0].scatter(y1_test, y1_pred, alpha=0.7, color='blue', edgecolors='k')
axes[0].plot([y1_test.min(), y1_test.max()], [y1_test.min(), y1_test.max()], 'r--', lw=2, label='Linha Perfeita')
axes[0].set_xlabel('Valores Reais', fontsize=12)
axes[0].set_ylabel('Valores Previstos', fontsize=12)
axes[0].set_title(f'Target 1 - {melhor_t1[0]}\nR²={melhor_t1[1]["r2"]:.3f}', fontsize=14)
axes[0].legend()
axes[0].grid(True)

# Gráfico para Target 2
y2_pred = melhor_t2[1]['y_pred']
axes[1].scatter(y2_test, y2_pred, alpha=0.7, color='green', edgecolors='k')
axes[1].plot([y2_test.min(), y2_test.max()], [y2_test.min(), y2_test.max()], 'r--', lw=2, label='Linha Perfeita')
axes[1].set_xlabel('Valores Reais', fontsize=12)
axes[1].set_ylabel('Valores Previstos', fontsize=12)
axes[1].set_title(f'Target 2 - {melhor_t2[0]}\nR²={melhor_t2[1]["r2"]:.3f}', fontsize=14)
axes[1].legend()
axes[1].grid(True)

# Gráfico para Target 3
y3_pred = melhor_t3[1]['y_pred']
axes[2].scatter(y3_test, y3_pred, alpha=0.7, color='purple', edgecolors='k')
axes[2].plot([y3_test.min(), y3_test.max()], [y3_test.min(), y3_test.max()], 'r--', lw=2, label='Linha Perfeita')
axes[2].set_xlabel('Valores Reais', fontsize=12)
axes[2].set_ylabel('Valores Previstos', fontsize=12)
axes[2].set_title(f'Target 3 - {melhor_t3[0]}\nR²={melhor_t3[1]["r2"]:.3f}', fontsize=14)
axes[2].legend()
axes[2].grid(True)

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.savefig('grafico_dispersao_previsto_vs_real.png', dpi=300, bbox_inches='tight')
print("✅ Gráfico de Dispersão (Previsto vs. Real) salvo como 'grafico_dispersao_previsto_vs_real.png'")
```

</details>

<small> 📖 Explicação:

Esta célula cria gráficos de dispersão comparando valores previstos pelos melhores modelos com os valores reais para cada target (Target1, Target2, Target3).

O processo inclui:

- Criação de uma figura com três subplots (`plt.subplots(1, 3, figsize=(18, 5))`).
- Para cada target:
  - Plotar valores reais (`y_test`) vs. valores previstos (`y_pred`) usando `scatter()`.
  - Adicionar uma linha pontilhada (`plot()`) representando a previsão perfeita (quando previsto = real).
  - Configurar título, rótulos e legenda.
- `plt.tight_layout()` ajusta o espaçamento entre gráficos.
- `plt.savefig()` salva a figura como `'grafico_dispersao_previsto_vs_real.png'`.

Esse tipo de gráfico ajuda a visualizar a precisão do modelo e identificar padrões ou desvios.

</small>

---

### **🧩 Célula 10 - Visualização 2: Importância das Features**

<details>

<summary> Trecho do codigo em Python </summary>

```python
def plotar_importancia(melhor_modelo_info, target_name, feature_names, ax):
    """Função auxiliar para plotar a importância das features em um eixo do matplotlib."""
    nome_modelo = melhor_modelo_info[0]
    modelo = melhor_modelo_info[1]['modelo']

    if hasattr(modelo, 'feature_importances_'):
        importances = modelo.feature_importances_
    else: # CatBoost
        importances = modelo.get_feature_importance()

    df_importances = pd.DataFrame({'feature': feature_names, 'importance': importances}).sort_values('importance', ascending=True).tail(15)

    ax.barh(df_importances['feature'], df_importances['importance'], color='darkcyan')
    ax.set_title(f'Top 15 Features - {target_name}\n(Modelo: {nome_modelo})', fontsize=14)
    ax.set_xlabel('Importância')

fig, axes = plt.subplots(1, 3, figsize=(20, 8))
fig.suptitle('Análise de Importância das Features para os Melhores Modelos', fontsize=16, fontweight='bold')

plotar_importancia(melhor_t1, 'Target 1', X.columns, axes[0])
plotar_importancia(melhor_t2, 'Target 2', X.columns, axes[1])
plotar_importancia(melhor_t3, 'Target 3', X.columns, axes[2])

plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.savefig('grafico_feature_importance.png', dpi=300, bbox_inches='tight')
print("✅ Gráfico de Importância das Features salvo como 'grafico_feature_importance.png'")
```

</details>

<small> 📖 Explicação:

Esta célula cria gráficos mostrando a importância das features para os melhores modelos de cada target.

O processo inclui:

- Definição da função `plotar_importancia()`, que:

  - Recebe informações do melhor modelo (`melhor_modelo_info`), o nome do target, os nomes das features e um eixo (`ax`) para plotagem.
  - Verifica se o modelo possui atributo `feature_importances_` (método comum em modelos de árvore). Caso seja CatBoost, usa `get_feature_importance()`.
  - Cria um DataFrame com nomes e importâncias das features, ordenando e selecionando as 15 mais importantes.
  - Plota um gráfico de barras horizontais (`barh`).

- Criação de uma figura com três subplots para cada target.
- Chamadas da função `plotar_importancia` para cada target.
- Ajuste de layout e salvamento do gráfico como `'grafico_feature_importance.png'`.

Esses gráficos ajudam a entender quais variáveis têm maior influência na previsão do modelo.

</small>

---

### **🧩 Célula 11 - Salvando os Melhores Modelos**

<details>

<summary> Trecho do codigo em Python </summary>

```python
with open('modelo_target1_final.pkl', 'wb') as f: pickle.dump(melhor_t1[1]['modelo'], f)
print(f"✅ Modelo para Target 1 ({melhor_t1[0]}) salvo como 'modelo_target1_final.pkl'")

with open('modelo_target2_final.pkl', 'wb') as f: pickle.dump(melhor_t2[1]['modelo'], f)
print(f"✅ Modelo para Target 2 ({melhor_t2[0]}) salvo como 'modelo_target2_final.pkl'")

with open('modelo_target3_final.pkl', 'wb') as f: pickle.dump(melhor_t3[1]['modelo'], f)
print(f"✅ Modelo para Target 3 ({melhor_t3[0]}) salvo como 'modelo_target3_final.pkl'")
```

</details>

<small> 📖 Explicação:

Esta célula salva os melhores modelos encontrados para cada target usando a biblioteca **pickle**.

O processo:

- Para cada target, abrimos um arquivo `.pkl` em modo de escrita binária (`'wb'`).
- Usamos `pickle.dump()` para salvar o modelo treinado (`melhor_tX[1]['modelo']`).
- Cada arquivo recebe um nome correspondente ao target (`modelo_target1_final.pkl`, etc.).
- Mensagens confirmam que os modelos foram salvos com sucesso.

Esses arquivos `.pkl` podem ser carregados posteriormente para fazer previsões sem precisar treinar novamente o modelo.

</small>

---

### **🧩 Célula 12 - Relatório Final dos Resultados**

<details>

<summary> Trecho do codigo em Python </summary>

```python
print("\n" + "=" * 80)
print("🎉 FASE 3 COMPLETA - RELATÓRIO FINAL 🎉")
print("=" * 80)

print("\n📊 RESUMO DOS MELHORES MODELOS:\n")

print(f"  TARGET 1")
print(f"  - Melhor Modelo: {melhor_t1[0]}")
print(f"  - R² (R-quadrado): {melhor_t1[1]['r2']:.4f}  (Explica ~{melhor_t1[1]['r2']:.1%} da variância)")
print(f"  - RMSE (Erro Médio): {melhor_t1[1]['rmse']:.2f} pontos")
print(f"  - MAE (Erro Absoluto Médio): {melhor_t1[1]['mae']:.2f} pontos\n")

print(f"  TARGET 2")
print(f"  - Melhor Modelo: {melhor_t2[0]}")
print(f"  - R² (R-quadrado): {melhor_t2[1]['r2']:.4f}  (Explica ~{melhor_t2[1]['r2']:.1%} da variância)")
print(f"  - RMSE (Erro Médio): {melhor_t2[1]['rmse']:.2f} pontos")
print(f"  - MAE (Erro Absoluto Médio): {melhor_t2[1]['mae']:.2f} pontos\n")

print(f"  TARGET 3")
print(f"  - Melhor Modelo: {melhor_t3[0]}")
print(f"  - R² (R-quadrado): {melhor_t3[1]['r2']:.4f}  (Explica ~{melhor_t3[1]['r2']:.1%} da variância)")
print(f"  - RMSE (Erro Médio): {melhor_t3[1]['rmse']:.2f} pontos")
print(f"  - MAE (Erro Absoluto Médio): {melhor_t3[1]['mae']:.2f} pontos\n")

print("📁 ARQUIVOS GERADOS:")
print("  ✅ modelo_target1_final.pkl")
print("  ✅ modelo_target2_final.pkl")
print("  ✅ modelo_target3_final.pkl")
print("  ✅ grafico_dispersao_previsto_vs_real.png")
print("  ✅ grafico_feature_importance.png")

print("\n🚀 PRÓXIMOS PASSOS:")
print("  1. Usar os arquivos '.pkl' salvos para carregar os modelos no seu backend (Node.js/FastAPI).")
print("  2. Criar as rotas da API que recebem novos dados de jogadores e usam os modelos para prever os targets.")
print("  3. Desenvolver o dashboard interativo que consome essa API e exibe os resultados e insights.")
print("  4. Preparar a apresentação de slides contando a história do projeto, dos dados aos resultados.")

print("\n✨ Excelente trabalho! A etapa de modelagem e análise está concluída. ✨")
```

</details>

<small> 📖 Explicação:

Esta célula gera um relatório final resumindo os resultados obtidos na fase de modelagem.

O conteúdo inclui:

- **Resumo dos Melhores Modelos** para cada target, exibindo:
  - Nome do modelo com melhor performance.
  - R² (R-quadrado): mede a qualidade da previsão.
  - RMSE: erro médio quadrático.
  - MAE: erro absoluto médio.
- **Lista dos arquivos gerados** no processo, incluindo modelos `.pkl` e gráficos.
- **Próximos passos sugeridos**, como integrar os modelos salvos a uma API e criar dashboards interativos.

</small>

---

</details>

---

**📈 Visão Geral dos Resultados da Modelagem**

<small>
Nesta fase, o dataset limpo e otimizado foi utilizado para treinar e avaliar **7 algoritmos de regressão diferentes**, com o objetivo de encontrar o melhor modelo para prever cada uma das três métricas-alvo.

Após o treinamento e a validação, os modelos com melhor desempenho, medido pelo coeficiente de determinação (R²), foram:

- **Target 1**: **CatBoost**, com **R² = 0.577**. Isso indica que o modelo consegue explicar aproximadamente **57,7%** da variação nos dados.
- **Target 2**: **Random Forest**, com **R² = 0.406**, explicando cerca de **40,6%** da variância.
- **Target 3**: **Random Forest**, com **R² = 0.420**, explicando aproximadamente **42,0%** da variância.

A imagem abaixo apresenta uma análise visual da performance desses três modelos. Cada gráfico de dispersão compara os **valores reais** (eixo X) com os **valores previstos** pelo modelo (eixo Y). A "Linha Perfeita" (tracejada em vermelho) representa o cenário ideal, onde a previsão é exatamente igual ao valor real.

Quanto mais próximos os pontos estiverem dessa linha, mais precisas são as previsões do modelo. Essa visualização ajuda a entender rapidamente a capacidade preditiva dos modelos escolhidos.
</small>

![alt text](data/processed/02_model_ready/grafico_dispersao_previsto_vs_real.png)
</file>

<file path="dashboard/frontend/Dockerfile">
FROM python:3.10-slim

WORKDIR /app

# Instala dependências
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copia o código da aplicação
COPY dashboard_dash.py .

# Expor a porta do Dash (8050 é o padrão do Plotly Dash)
EXPOSE 8050

# Comando para rodar a aplicação Dash
# O Dash é executado como um script Python normal (dashboard_dash.py), 
# onde a porta 8050 e o host 0.0.0.0 já estão definidos internamente.
CMD ["python", "dashboard_dash.py"]
</file>

<file path="dashboard/frontend/requirements.txt">
requests # Para fazer chamadas HTTP ao Flask
pandas
plotly-express
plotly
xlsxwriter
shap
matplotlib
dash 
dash-bootstrap-components 
dash-core-components 
dash-html-components 
dash-table 
numpy 
shap
</file>

<file path="dashboard/docker-compose.yml">
version: '3.8'

services:
  # 1. SERVIÇO DO BANCO DE DADOS (PostgreSQL)
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - daruma_net

  # 2. SERVIÇO DA API (Flask/FastAPI)
  backend:
    build: ./backend
    restart: always
    environment:
      # Variáveis de ambiente para o Flask se conectar ao DB
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - db
    networks:
      - daruma_net

  # 3. SERVIÇO DO DASHBOARD (PLOTLY DASH)
  frontend:
    build:
      context: ./frontend  # Assumindo que o Dockerfile e o código estão em uma pasta 'frontend'
    restart: always
    environment:
      # Variável para o Dash saber onde está o Backend
      BACKEND_URL: http://backend:5000
    depends_on:
      - backend
    ports:
      # CORREÇÃO: Mapeando a porta padrão do Dash (8050)
      - "127.0.0.1:8050:8050"
    networks:
      - daruma_net

networks:
  daruma_net:
    driver: bridge

volumes:
  postgres_data:
</file>

<file path="dashboard/backend/Dockerfile">
FROM python:3.10-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copia todos os arquivos da aplicação
COPY . .

EXPOSE 5000

# Comando para rodar a aplicação com Uvicorn (servidor ASGI para FastAPI)
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "5000"]
</file>

<file path="dashboard/backend/requirements.txt">
fastapi
uvicorn[standard]
python-multipart
sqlalchemy
psycopg2-binary
python-jose[cryptography]
pandas
scikit-learn==1.7.2 # Fixando a versão para consistência
joblib
openpyxl
catboost
shap
Flask-Bcrypt 
optuna
lightgbm
xgboost
</file>

<file path="dashboard/frontend/dashboard_dash.py">
import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
import requests
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go # Import necessário para o gráfico SHAP
import os
from io import BytesIO
import base64

# --- Configuração ---
BACKEND_URL = os.getenv('BACKEND_URL', 'http://localhost:5000') 
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP], suppress_callback_exceptions=True)
app.title = "🎯 Projeto Daruma: Dashboard de Previsão"
server = app.server # Para o Gunicorn

# =============================================================================
# FUNÇÕES DE API E UTILITÁRIAS
# =============================================================================

def login_api(username, password):
    """Chama a API de login do backend FastAPI."""
    try:
        # ----> CORREÇÃO AQUI: Trocar 'json=' por 'data=' <----
        # FastAPI com OAuth2PasswordRequestForm espera dados de formulário.
        login_data = {'username': username, 'password': password}
        response = requests.post(f"{BACKEND_URL}/login", data=login_data)
        
        if response.status_code == 200:
            return response.json().get('access_token'), None
        else:
            # Tenta extrair a mensagem de erro detalhada do FastAPI
            detail = response.json().get('detail', 'Erro desconhecido no login.')
            return None, detail
            
    except requests.exceptions.RequestException as e:
        return None, f"Erro de conexão com o backend: {e}"
    
def register_api(username, password):
    """Chama a API de registro do backend."""
    try:
        response = requests.post(f"{BACKEND_URL}/register", json={'username': username, 'password': password})
        return (True, response.json().get('msg')) if response.status_code == 201 else (False, response.json().get('msg', 'Erro desconhecido'))
    except requests.exceptions.RequestException as e:
        return False, f"Erro de conexão com o backend: {e}"

def parse_contents(contents):
    """Decodifica o conteúdo do arquivo enviado via dcc.Upload."""
    _, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
    return decoded

def convert_df_to_excel(df):
    """Converte um DataFrame para um arquivo Excel em memória e o codifica em base64."""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Previsoes')
    excel_data = output.getvalue()
    return base64.b64encode(excel_data).decode('utf-8')

# =============================================================================
# COMPONENTES DE LAYOUT
# =============================================================================

store = dcc.Store(id='session-store', storage_type='session', data={'logged_in': False, 'token': None, 'username': None, 'last_results': None})
upload_data_store = dcc.Store(id='upload-data-store', storage_type='memory')

auth_layout = dbc.Container(
    dbc.Row(
        dbc.Col(
            dbc.Card(
                dbc.CardBody([
                    html.H3("🎯 Bem-vindo ao Projeto Daruma", className="text-center mb-4"),
                    dbc.Alert(id='auth-message', color='danger', is_open=False),
                    dbc.RadioItems(
                        id='auth-mode',
                        options=[
                            {'label': 'Login', 'value': 'login'},
                            {'label': 'Registrar', 'value': 'register'}
                        ],
                        value='login',
                        inline=True,
                        className="mb-3 d-flex justify-content-center"
                    ),
                    dbc.Input(id='username-input', placeholder='Usuário', type='text', className="mb-3"),
                    dbc.Input(id='password-input', placeholder='Senha', type='password', className="mb-3"),
                    dbc.Button("Acessar", id='auth-button', color='primary', n_clicks=0, className="w-100")
                ])
            ),
            width=4
        ),
        justify="center",
        align="center",
        className="vh-100"
    ),
    fluid=True
)

main_dashboard_layout = dbc.Container([
    dbc.Row([
        dbc.Col(html.H2("🎯 Projeto Daruma: Dashboard de Previsão"), width='auto'),
        dbc.Col(html.Div(id='welcome-user-message'), className="text-center my-auto"),
        dbc.Col(dbc.Button("Logout", id='logout-button', color='danger'), width='auto', className="ms-auto")
    ], className="mb-4 align-items-center"),
    
    dbc.Tabs([
        dbc.Tab(label="📊 Nova Previsão", tab_id="predict-tab", children=[
            dcc.Upload(
                id='upload-data',
                children=html.Div(['Arraste e solte ou ', html.A('Selecione um Arquivo Excel (.xlsx)')]),
                style={'width': '100%', 'height': '60px', 'lineHeight': '60px', 'borderWidth': '1px', 'borderStyle': 'dashed', 'borderRadius': '5px', 'textAlign': 'center', 'margin': '20px 0'},
                multiple=False
            ),
            html.Div(id='upload-status', className="mb-3"),
            dbc.Button("Executar Previsão", id='predict-button', color='success', className="mb-4", disabled=True),
            dcc.Loading(id="loading-output", type="default", children=[
                html.Div(id='prediction-results-output'),
                html.Div(id='shap-analysis-output', className="mt-4")
            ])
        ]),
        dbc.Tab(label="🧠 Análise do Modelo", tab_id="analysis-tab", children=[
            html.H3("Ranking de Importância das Features", className="mt-3"),
            html.P("Este gráfico mostra as 20 features mais importantes que o modelo utiliza para fazer as previsões para cada target."),
            dbc.Button("Carregar Análise", id='load-analysis-button', color='primary', className="mb-3"),
            dcc.Loading(id="loading-analysis", type="default", children=html.Div(id='feature-importance-output'))
        ]),
        dbc.Tab(label="⏳ Histórico", tab_id="history-tab", children=[
            html.H3("Histórico de Uploads", className="mt-3"),
            dbc.Button("Carregar Histórico", id='load-history-button', color='secondary', className="mb-3"),
            html.Div(id='history-output')
        ]),
    ], id="tabs", active_tab="predict-tab"),
], fluid=True)

app.layout = html.Div([dcc.Location(id='url', refresh=False), store, upload_data_store, html.Div(id='page-content')])

# =============================================================================
# FUNÇÕES DE RENDERIZAÇÃO
# =============================================================================

def render_prediction_results(predictions_data):
    """
    ### FUNÇÃO SIMPLIFICADA ###
    Gera o layout dos resultados da previsão com tabela ordenável e gráfico de barras.
    """
    if not predictions_data:
        return dbc.Alert("Nenhuma previsão retornada.", color="warning")

    df_output = pd.DataFrame(predictions_data)
    excel_base64 = convert_df_to_excel(df_output)

    # Gráfico de barras das previsões
    # O melt transforma as colunas de previsão em linhas, facilitando a plotagem
    df_melted = df_output.melt(
        id_vars='Código de Acesso', 
        value_vars=['Previsão T1', 'Previsão T2', 'Previsão T3'], 
        var_name='Target', 
        value_name='Valor Previsto'
    )
    fig_bar = px.bar(
        df_melted, 
        x='Código de Acesso', 
        y='Valor Previsto', 
        color='Target', 
        title="Previsões dos Targets por Jogador", 
        barmode='group',
        labels={'Código de Acesso': 'Jogador', 'Valor Previsto': 'Valor da Previsão'}
    )
    fig_bar.update_layout(xaxis={'categoryorder':'total descending'}) # Ordena o gráfico pelo valor total

    return html.Div([
        html.H4("Resultados da Previsão", className="mt-4"),
        # A tabela agora é ordenável pelo usuário clicando nos cabeçalhos
        dash_table.DataTable(
            id='predictions-table',
            columns=[{"name": i, "id": i} for i in df_output.columns],
            data=df_output.to_dict('records'),
            style_table={'overflowX': 'auto'},
            sort_action="native",  # Habilita a ordenação pelo frontend
            filter_action="native", # Habilita filtros simples
            page_action="native",
            page_current=0,
            page_size=10,
            style_header={'backgroundColor': 'rgb(230, 230, 230)', 'fontWeight': 'bold'}
        ),
        html.A(
            dbc.Button("📥 Baixar Resultados (.xlsx)", color="info", className="mt-3"),
            id='download-link',
            href=f"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{excel_base64}",
            download="previsoes_daruma.xlsx"
        ),
        html.H4("Comparação Visual", className="mt-4"),
        dcc.Graph(id='bar-chart', figure=fig_bar)
    ])

# =============================================================================
# CALLBACKS (SEM ALTERAÇÕES NAS SEÇÕES DE AUTENTICAÇÃO E UPLOAD)
# =============================================================================

@app.callback(
    Output('page-content', 'children'),
    [Input('session-store', 'data'), Input('url', 'pathname')]
)
def render_page_content(data, pathname):
    is_logged_in = data and data.get('logged_in')

    if pathname == '/dashboard' and is_logged_in:
        return main_dashboard_layout
    elif pathname == '/logout':
        # Limpa os dados da sessão ao fazer logout
        data['logged_in'] = False
        data['token'] = None
        data['username'] = None
        data['last_results'] = None
        return auth_layout
    elif is_logged_in:
        # Se estiver logado mas a URL for a raiz ('/'), mostra o dashboard
        return main_dashboard_layout
    else:
        # Se não estiver logado, sempre mostra a tela de login
        return auth_layout
@app.callback(
    [
        Output('url', 'pathname', allow_duplicate=True), # <-- ADICIONE ESTA LINHA
        Output('session-store', 'data'),
        Output('auth-message', 'children'),
        Output('auth-message', 'is_open')
    ],
    [Input('auth-button', 'n_clicks')],
    [
        State('auth-mode', 'value'),
        State('username-input', 'value'),
        State('password-input', 'value'),
        State('session-store', 'data')
    ],
    prevent_initial_call=True
)
def handle_auth(n_clicks, auth_mode, username, password, data):
    if not username or not password:
        # dash.no_update para a URL, pois não queremos redirecionar
        return dash.no_update, dash.no_update, "Usuário e senha são obrigatórios.", True

    if auth_mode == 'login':
        token, error = login_api(username, password)
        if token:
            data.update({'logged_in': True, 'token': token, 'username': username})
            # Redireciona para /dashboard em caso de sucesso
            return '/dashboard', data, "", False
        # Se o login falhar, não redireciona
        return dash.no_update, dash.no_update, error, True
        
    elif auth_mode == 'register':
        success, message = register_api(username, password)
        # Não redireciona no registro, apenas mostra a mensagem
        return dash.no_update, dash.no_update, message, True
        
    return dash.no_update, dash.no_update, "", False

@app.callback(Output('welcome-user-message', 'children'), Input('session-store', 'data'))
def update_welcome_message(data):
    return f"Bem-vindo(a), {data.get('username')}!" if data and data.get('logged_in') else ""

@app.callback(
    [Output('url', 'pathname', allow_duplicate=True),
     Output('session-store', 'data', allow_duplicate=True)],
    [Input('logout-button', 'n_clicks')],
    [State('session-store', 'data')],
    prevent_initial_call=True
)
def handle_logout(n_clicks, data):
    if n_clicks:
        data.update({'logged_in': False, 'token': None, 'username': None, 'last_results': None})
        return '/logout', data
    return dash.no_update, dash.no_update

@app.callback(
    [Output('upload-data-store', 'data'), Output('upload-status', 'children'), Output('predict-button', 'disabled')],
    [Input('upload-data', 'contents')],
    [State('upload-data', 'filename')],
    prevent_initial_call=True
)
def handle_upload(contents, filename):
    if contents:
        decoded_content = parse_contents(contents)
        stored_data = {'filename': filename, 'contents': base64.b64encode(decoded_content).decode('utf-8')}
        return stored_data, html.Div(['Arquivo selecionado: ', html.B(filename)]), False
    return None, "", True

# --- CALLBACK DE PREVISÃO (Simplificado) ---
@app.callback(
    [Output('prediction-results-output', 'children'), Output('session-store', 'data', allow_duplicate=True)],
    [Input('predict-button', 'n_clicks')],
    [State('session-store', 'data'), State('upload-data-store', 'data')],
    prevent_initial_call=True
)
def run_prediction(n_clicks, session_data, upload_data):
    if not n_clicks or not upload_data or not session_data.get('token'):
        raise dash.exceptions.PreventUpdate

    headers = {'Authorization': f'Bearer {session_data["token"]}'}
    files = {'file': (upload_data['filename'], base64.b64decode(upload_data['contents']), 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
    
    try:
        response = requests.post(f"{BACKEND_URL}/predict", headers=headers, files=files)
        if response.status_code == 200:
            response_json = response.json()
            predictions_list = response_json.get('predictions')
            session_data['last_results'] = response_json
            return render_prediction_results(predictions_list), session_data
        else:
            return dbc.Alert(f"Erro na API: {response.json().get('msg')}", color="danger"), dash.no_update
    except requests.exceptions.RequestException as e:
        return dbc.Alert(f"Erro de conexão com o backend: {e}", color="danger"), dash.no_update

# --- CALLBACKS DE HISTÓRICO E ANÁLISE (Sem alterações) ---
@app.callback(
    Output('history-output', 'children'),
    Input('load-history-button', 'n_clicks'),
    State('session-store', 'data'),
    prevent_initial_call=True
)
def load_history(n_clicks, data):
    if not data or not data.get('token'):
        return dbc.Alert("Sessão inválida.", color="danger")
    
    headers = {'Authorization': f'Bearer {data["token"]}'}
    try:
        response = requests.get(f"{BACKEND_URL}/history", headers=headers)
        if response.status_code == 200:
            history_data = response.json()
            if not history_data:
                return dbc.Alert("Nenhum histórico encontrado.", color="info")
            df_history = pd.DataFrame(history_data)
            return dash_table.DataTable(
                columns=[{'name': 'Data do Upload', 'id': 'timestamp'}, {'name': 'Nº de Jogadores Previstos', 'id': 'num_jogadores'}],
                data=df_history.to_dict('records'),
                sort_action="native"
            )
        else:
            print(f"Erro ao buscar histórico: {response.json().get('msg')}")
            return dbc.Alert(f"Erro ao buscar histórico: {response.json().get('msg')}", color="danger")
    except requests.exceptions.RequestException as e:
        return dbc.Alert(f"Erro de conexão com o backend: {e}", color="danger")

@app.callback(
    Output('feature-importance-output', 'children'),
    Input('load-analysis-button', 'n_clicks'),
    State('session-store', 'data'),
    prevent_initial_call=True
)
def load_feature_importance(n_clicks, data):
    if not data or not data.get('token'):
        return dbc.Alert("Sessão inválida.", color="danger")

    headers = {'Authorization': f'Bearer {data["token"]}'}
    try:
        response = requests.get(f"{BACKEND_URL}/feature_importance", headers=headers)
        if response.status_code == 200:
            importances = response.json()
            graphs = []
            for target, features in importances.items():
                if not features: continue
                df_importance = pd.DataFrame(features)
                fig = px.bar(df_importance, x='importance', y='feature', orientation='h', title=f"Importância para o {target}")
                fig.update_layout(yaxis={'categoryorder':'total ascending'})
                graphs.append(dcc.Graph(figure=fig))
            return html.Div(graphs) if graphs else dbc.Alert("Nenhuma informação de importância de feature disponível.", color="info")
        else:
            return dbc.Alert(f"Erro ao buscar dados: {response.json().get('msg')}", color="danger")
    except requests.exceptions.RequestException as e:
        return dbc.Alert(f"Erro de conexão com o backend: {e}", color="danger")

# --- CALLBACK DO SHAP (Sem alterações) ---
@app.callback(
    Output('shap-analysis-output', 'children'),
    Input('session-store', 'data') # Dispara quando os resultados da sessão são atualizados
)
def render_shap_analysis(session_data):
    if not session_data or 'last_results' not in session_data or not session_data['last_results']:
        return None

    shap_data = session_data['last_results'].get('shap_data')
    if not shap_data:
        return None # Não renderiza nada se não houver dados SHAP

    # Pega a lista de jogadores (as chaves do dicionário shap_data)
    jogadores = list(shap_data.keys())
    
    return html.Div([
        html.H4("Análise de Contribuição das Features (SHAP)", className="mt-5"),
        html.P("Selecione um jogador para ver como cada feature contribuiu para a sua previsão. Valores positivos empurram a previsão para cima, e valores negativos, para baixo."),
        
        dbc.Row([
            dbc.Col(
                dcc.Dropdown(
                    id='shap-player-dropdown',
                    options=[{'label': j, 'value': j} for j in jogadores],
                    value=jogadores[0], # Seleciona o primeiro jogador por padrão
                    clearable=False
                ),
                width=12, md=6, lg=4
            )
        ], className="mb-4"),

        # Este Div receberá os gráficos do jogador selecionado
        dcc.Loading(html.Div(id='shap-graphs-container'))
    ])

@app.callback(
    Output('shap-graphs-container', 'children'),
    Input('shap-player-dropdown', 'value'),
    State('session-store', 'data')
)
def update_shap_graphs(selected_player, session_data):
    if not selected_player or not session_data or not session_data.get('last_results'):
        return None

    all_predictions = session_data['last_results'].get('predictions', [])
    shap_data = session_data['last_results'].get('shap_data', {})
    
    # Encontra os dados de previsão para o jogador selecionado
    player_predictions = next((p for p in all_predictions if p['Código de Acesso'] == selected_player), None)
    
    # Encontra os dados SHAP para o jogador selecionado
    player_shap_data = shap_data.get(selected_player)

    if not player_shap_data or not player_predictions:
        return dbc.Alert("Dados não encontrados para o jogador selecionado.", color="warning")

    # --- ### NOVA SEÇÃO: CRIAÇÃO DOS CARTÕES DE RESULTADO (KPIs) ### ---
    kpi_cards = dbc.Row([
        dbc.Col(dbc.Card([
            dbc.CardHeader("Previsão Target 1"),
            dbc.CardBody(html.H4(f"{player_predictions.get('Previsão T1', 'N/A')}", className="card-title"))
        ], color="primary", inverse=True), md=4),
        dbc.Col(dbc.Card([
            dbc.CardHeader("Previsão Target 2"),
            dbc.CardBody(html.H4(f"{player_predictions.get('Previsão T2', 'N/A')}", className="card-title"))
        ], color="success", inverse=True), md=4),
        dbc.Col(dbc.Card([
            dbc.CardHeader("Previsão Target 3"),
            dbc.CardBody(html.H4(f"{player_predictions.get('Previsão T3', 'N/A')}", className="card-title"))
        ], color="info", inverse=True), md=4)
    ], className="mb-4")


    # --- Geração dos gráficos de barras SHAP (lógica existente) ---
    graphs = []
    for target_key, data in player_shap_data.items():
        if not all(k in data for k in ['feature_names', 'shap_values']):
            continue
            
        df_shap = pd.DataFrame({
            'feature': data['feature_names'],
            'shap_value': data['shap_values']
        }).sort_values(by='shap_value', key=abs, ascending=False).head(15)

        fig = px.bar(
            df_shap,
            x='shap_value',
            y='feature',
            orientation='h',
            title=f"Contribuições (SHAP) para {target_key} do Jogador: {selected_player}",
            labels={'shap_value': 'Impacto na Previsão', 'feature': 'Feature'}
        )
        fig.update_layout(yaxis={'categoryorder': 'total ascending'})
        graphs.append(dcc.Graph(figure=fig))
    
    # --- Retorna os cartões e os gráficos juntos ---
    return html.Div([kpi_cards] + graphs) if graphs else html.Div(kpi_cards)

if __name__ == '__main__':
    # Use 'debug=False' para produção com Gunicorn
    app.run(debug=True, host='0.0.0.0', port=8050)
</file>

</files>
